================================================================================
guard
================================================================================
fn init {
  guard 1 > 2 && 2 < 3
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (guard_expression
            (compound_expression
              (binary_expression
                (compound_expression
                  (binary_expression
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal)))))
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal)))))))
                (compound_expression
                  (binary_expression
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal)))))
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal)))))))))))))))

================================================================================
guard with else
================================================================================
fn init {
  guard 1 > 2 && 2 < 3 else {
    return
  }
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (guard_expression
            (compound_expression
              (binary_expression
                (compound_expression
                  (binary_expression
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal)))))
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal)))))))
                (compound_expression
                  (binary_expression
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal)))))
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal)))))))))
            (guard_else_expression
              (block_expression
                (statement_expression
                  (return_expression))))))))))

================================================================================
guard let
================================================================================
fn init {
  guard let None = Some(3)
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (guard_let_expression
            (pattern
              (simple_pattern
                (constructor_pattern
                  (constructor_expression
                    (uppercase_identifier)))))
            (simple_expression
              (apply_expression
                (simple_expression
                  (constructor_expression
                    (uppercase_identifier)))
                (arguments
                  (argument
                    (expression
                      (compound_expression
                        (simple_expression
                          (atomic_expression
                            (literal
                              (integer_literal))))))))))))))))

================================================================================
guard let with else
================================================================================
fn init {
  guard let None = Some(3) else {
    Some(_) => ()
  }
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (guard_let_expression
            (pattern
              (simple_pattern
                (constructor_pattern
                  (constructor_expression
                    (uppercase_identifier)))))
            (simple_expression
              (apply_expression
                (simple_expression
                  (constructor_expression
                    (uppercase_identifier)))
                (arguments
                  (argument
                    (expression
                      (compound_expression
                        (simple_expression
                          (atomic_expression
                            (literal
                              (integer_literal))))))))))
            (guard_let_else_expression
              (case_clause
                (pattern
                  (simple_pattern
                    (constructor_pattern
                      (constructor_expression
                        (uppercase_identifier))
                      (constructor_pattern_argument
                        (pattern
                          (simple_pattern))))))
                (statement_expression
                  (expression
                    (compound_expression
                      (simple_expression
                        (unit_expression)))))))))))))

================================================================================
guard is
================================================================================
fn init {
  guard a is Some(3) else {
    return
  }
  guard b is None
}

pub fn[A] View::iter(self : View[A]) -> Iter[A] {
  Iter::new(fn(yield_) {
    for v in self {
      guard yield_(v) is IterContinue else { break IterEnd }

    } else {
      IterContinue
    }
  })
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (guard_expression
            (compound_expression
              (postfix_expression
                (is_expression
                  (simple_expression
                    (qualified_identifier
                      (lowercase_identifier)))
                  (simple_pattern
                    (constructor_pattern
                      (constructor_expression
                        (uppercase_identifier))
                      (constructor_pattern_argument
                        (pattern
                          (simple_pattern
                            (literal
                              (integer_literal))))))))))
            (guard_else_expression
              (block_expression
                (statement_expression
                  (return_expression))))))
        (statement_expression
          (guard_expression
            (compound_expression
              (postfix_expression
                (is_expression
                  (simple_expression
                    (qualified_identifier
                      (lowercase_identifier)))
                  (simple_pattern
                    (constructor_pattern
                      (constructor_expression
                        (uppercase_identifier))))))))))))
  (structure_item
    (function_definition
      (visibility)
      (type_parameters
        (type_identifier
          (identifier
            (uppercase_identifier))))
      (function_identifier
        (type_name
          (qualified_type_identifier
            (identifier
              (uppercase_identifier))))
        (lowercase_identifier))
      (parameters
        (parameter
          (positional_parameter
            (lowercase_identifier)
            (type_annotation
              (type
                (apply_type
                  (qualified_type_identifier
                    (identifier
                      (uppercase_identifier)))
                  (type_arguments
                    (type
                      (apply_type
                        (qualified_type_identifier
                          (identifier
                            (uppercase_identifier))))))))))))
      (return_type
        (type
          (apply_type
            (qualified_type_identifier
              (identifier
                (uppercase_identifier)))
            (type_arguments
              (type
                (apply_type
                  (qualified_type_identifier
                    (identifier
                      (uppercase_identifier)))))))))
      (block_expression
        (statement_expression
          (expression
            (compound_expression
              (simple_expression
                (apply_expression
                  (simple_expression
                    (method_expression
                      (type_name
                        (qualified_type_identifier
                          (identifier
                            (uppercase_identifier))))
                      (lowercase_identifier)))
                  (arguments
                    (argument
                      (expression
                        (compound_expression
                          (simple_expression
                            (anonymous_lambda_expression
                              (parameters
                                (parameter
                                  (positional_parameter
                                    (lowercase_identifier))))
                              (block_expression
                                (statement_expression
                                  (expression
                                    (for_in_expression
                                      (lowercase_identifier)
                                      (expression
                                        (compound_expression
                                          (simple_expression
                                            (qualified_identifier
                                              (lowercase_identifier)))))
                                      (block_expression
                                        (statement_expression
                                          (guard_expression
                                            (compound_expression
                                              (postfix_expression
                                                (is_expression
                                                  (simple_expression
                                                    (apply_expression
                                                      (simple_expression
                                                        (qualified_identifier
                                                          (lowercase_identifier)))
                                                      (arguments
                                                        (argument
                                                          (expression
                                                            (compound_expression
                                                              (simple_expression
                                                                (qualified_identifier
                                                                  (lowercase_identifier)))))))))
                                                  (simple_pattern
                                                    (constructor_pattern
                                                      (constructor_expression
                                                        (uppercase_identifier)))))))
                                            (guard_else_expression
                                              (block_expression
                                                (statement_expression
                                                  (break_expression
                                                    (expression
                                                      (compound_expression
                                                        (simple_expression
                                                          (constructor_expression
                                                            (uppercase_identifier))))))))))))
                                      (else_clause
                                        (block_expression
                                          (statement_expression
                                            (expression
                                              (compound_expression
                                                (simple_expression
                                                  (constructor_expression
                                                    (uppercase_identifier)))))))))))))))))))))))))))
