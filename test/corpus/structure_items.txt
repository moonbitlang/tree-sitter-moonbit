================================================================================
Type definitions
================================================================================
type X
priv type X
pub (readonly) type X
type X[t]
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (type_definition
      (identifier
        (uppercase_identifier))))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (type_definition
      (visibility)
      (identifier
        (uppercase_identifier))))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (type_definition
      (visibility
        (pub_attribute))
      (identifier
        (uppercase_identifier))))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (type_definition
      (identifier
        (uppercase_identifier))
      (type_parameters
        (type_identifier
          (identifier
            (lowercase_identifier)))))))

================================================================================
Type definitions
================================================================================
type! X
type! X Int
priv type! X
pub (readonly) type! X
type! X {
  A(Int)
  B(Double)
}
type! Y derive(Show)
type! X {
  A(Int)
  B(Double)
} derive(Show)
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (error_type_definition
      (identifier
        (uppercase_identifier))))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (error_type_definition
      (identifier
        (uppercase_identifier))
      (type
        (apply_type
          (qualified_type_identifier
            (identifier
              (uppercase_identifier)))))))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (error_type_definition
      (visibility)
      (identifier
        (uppercase_identifier))))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (error_type_definition
      (visibility
        (pub_attribute))
      (identifier
        (uppercase_identifier))))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (error_type_definition
      (identifier
        (uppercase_identifier))
      (enum_constructor
        (uppercase_identifier)
        (constructor_parameter
          (type
            (apply_type
              (qualified_type_identifier
                (identifier
                  (uppercase_identifier)))))))
      (semicolon
        (automatic_semicolon))
      (enum_constructor
        (uppercase_identifier)
        (constructor_parameter
          (type
            (apply_type
              (qualified_type_identifier
                (identifier
                  (uppercase_identifier)))))))
      (semicolon
        (automatic_semicolon))))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (error_type_definition
      (identifier
        (uppercase_identifier))
      (derive_directive
        (derive_keyword)
        (derive_item
          (type_name
            (qualified_type_identifier
              (identifier
                (uppercase_identifier))))))))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (error_type_definition
      (identifier
        (uppercase_identifier))
      (enum_constructor
        (uppercase_identifier)
        (constructor_parameter
          (type
            (apply_type
              (qualified_type_identifier
                (identifier
                  (uppercase_identifier)))))))
      (semicolon
        (automatic_semicolon))
      (enum_constructor
        (uppercase_identifier)
        (constructor_parameter
          (type
            (apply_type
              (qualified_type_identifier
                (identifier
                  (uppercase_identifier)))))))
      (semicolon
        (automatic_semicolon))
      (derive_directive
        (derive_keyword)
        (derive_item
          (type_name
            (qualified_type_identifier
              (identifier
                (uppercase_identifier)))))))))

================================================================================
Struct definitions
================================================================================
pub struct Ref[T] { mut content: T }

struct Queue[T] {
  front:List[T]
  back:List[T]
}

struct Color {
  r: Int
  g: Int
  b: Int
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (struct_definition
      (visibility)
      (identifier
        (uppercase_identifier))
      (type_parameters
        (type_identifier
          (identifier
            (uppercase_identifier))))
      (struct_field_declaration
        (mutability)
        (lowercase_identifier)
        (colon)
        (type
          (apply_type
            (qualified_type_identifier
              (identifier
                (uppercase_identifier))))))))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (struct_definition
      (identifier
        (uppercase_identifier))
      (type_parameters
        (type_identifier
          (identifier
            (uppercase_identifier))))
      (struct_field_declaration
        (lowercase_identifier)
        (colon)
        (type
          (apply_type
            (qualified_type_identifier
              (identifier
                (uppercase_identifier)))
            (type_arguments
              (type
                (apply_type
                  (qualified_type_identifier
                    (identifier
                      (uppercase_identifier)))))))))
      (semicolon
        (automatic_semicolon))
      (struct_field_declaration
        (lowercase_identifier)
        (colon)
        (type
          (apply_type
            (qualified_type_identifier
              (identifier
                (uppercase_identifier)))
            (type_arguments
              (type
                (apply_type
                  (qualified_type_identifier
                    (identifier
                      (uppercase_identifier)))))))))
      (semicolon
        (automatic_semicolon))))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (struct_definition
      (identifier
        (uppercase_identifier))
      (struct_field_declaration
        (lowercase_identifier)
        (colon)
        (type
          (apply_type
            (qualified_type_identifier
              (identifier
                (uppercase_identifier))))))
      (semicolon
        (automatic_semicolon))
      (struct_field_declaration
        (lowercase_identifier)
        (colon)
        (type
          (apply_type
            (qualified_type_identifier
              (identifier
                (uppercase_identifier))))))
      (semicolon
        (automatic_semicolon))
      (struct_field_declaration
        (lowercase_identifier)
        (colon)
        (type
          (apply_type
            (qualified_type_identifier
              (identifier
                (uppercase_identifier))))))
      (semicolon
        (automatic_semicolon)))))

================================================================================
Enum definitions
================================================================================
enum Empyt {}
enum One { One }
enum Two[A, B] {
  Left(A)
  Right(B)
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (enum_definition
      (identifier
        (uppercase_identifier))))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (enum_definition
      (identifier
        (uppercase_identifier))
      (enum_constructor
        (uppercase_identifier))))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (enum_definition
      (identifier
        (uppercase_identifier))
      (type_parameters
        (type_identifier
          (identifier
            (uppercase_identifier)))
        (type_identifier
          (identifier
            (uppercase_identifier))))
      (enum_constructor
        (uppercase_identifier)
        (constructor_parameter
          (type
            (apply_type
              (qualified_type_identifier
                (identifier
                  (uppercase_identifier)))))))
      (semicolon
        (automatic_semicolon))
      (enum_constructor
        (uppercase_identifier)
        (constructor_parameter
          (type
            (apply_type
              (qualified_type_identifier
                (identifier
                  (uppercase_identifier)))))))
      (semicolon
        (automatic_semicolon)))))

================================================================================
value definitions
================================================================================
let x = 42
pub let y: Int = 42
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (let_expression
      (pattern
        (simple_pattern
          (lowercase_identifier)))
      (expression
        (pipeline_expression
          (compound_expression
            (simple_expression
              (atomic_expression
                (literal
                  (integer_literal)))))))))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (let_expression
      (visibility)
      (pattern
        (simple_pattern
          (lowercase_identifier)))
      (type_annotation
        (colon)
        (type
          (apply_type
            (qualified_type_identifier
              (identifier
                (uppercase_identifier))))))
      (expression
        (pipeline_expression
          (compound_expression
            (simple_expression
              (atomic_expression
                (literal
                  (integer_literal))))))))))

================================================================================
Function definitions
================================================================================
fn id[T] (x: T) -> T { x }
fn empty () { }
fn error(a: T) -> T! {}
fn error(a: T) -> T!Error {}
fn &Trait::method(self: Self) -> Int { 42 }
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (named_lambda_expression
      (function_identifier
        (lowercase_identifier))
      (type_parameters
        (type_identifier
          (identifier
            (uppercase_identifier))))
      (parameters
        (parameter
          (lowercase_identifier)
          (type_annotation
            (colon)
            (type
              (apply_type
                (qualified_type_identifier
                  (identifier
                    (uppercase_identifier))))))))
      (return_type
        (type
          (apply_type
            (qualified_type_identifier
              (identifier
                (uppercase_identifier))))))
      (block_expression
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (qualified_identifier
                    (lowercase_identifier))))))))))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (named_lambda_expression
      (function_identifier
        (lowercase_identifier))
      (parameters)
      (block_expression)))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (named_lambda_expression
      (function_identifier
        (lowercase_identifier))
      (parameters
        (parameter
          (lowercase_identifier)
          (type_annotation
            (colon)
            (type
              (apply_type
                (qualified_type_identifier
                  (identifier
                    (uppercase_identifier))))))))
      (return_type
        (type_with_error
          (type
            (apply_type
              (qualified_type_identifier
                (identifier
                  (uppercase_identifier)))))))
      (block_expression)))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (named_lambda_expression
      (function_identifier
        (lowercase_identifier))
      (parameters
        (parameter
          (lowercase_identifier)
          (type_annotation
            (colon)
            (type
              (apply_type
                (qualified_type_identifier
                  (identifier
                    (uppercase_identifier))))))))
      (return_type
        (type_with_error
          (type
            (apply_type
              (qualified_type_identifier
                (identifier
                  (uppercase_identifier)))))
          (type
            (apply_type
              (qualified_type_identifier
                (identifier
                  (uppercase_identifier)))))))
      (block_expression)))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (named_lambda_expression
      (function_identifier
        (type_name
          (qualified_type_identifier
            (identifier
              (uppercase_identifier))))
        (colon_colon)
        (lowercase_identifier))
      (parameters
        (parameter
          (lowercase_identifier)
          (type_annotation
            (colon)
            (type
              (apply_type
                (qualified_type_identifier
                  (identifier
                    (uppercase_identifier))))))))
      (return_type
        (type
          (apply_type
            (qualified_type_identifier
              (identifier
                (uppercase_identifier))))))
      (block_expression
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (atomic_expression
                    (literal
                      (integer_literal))))))))))))

================================================================================
Test
================================================================================

let printable = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (let_expression
      (pattern
        (simple_pattern
          (lowercase_identifier)))
      (expression
        (pipeline_expression
          (compound_expression
            (simple_expression
              (atomic_expression
                (literal
                  (string_literal
                    (string_fragment
                      (unescaped_string_fragment))
                    (string_fragment
                      (escape_sequence))
                    (string_fragment
                      (unescaped_string_fragment))
                    (string_fragment
                      (unescaped_string_fragment))
                    (string_fragment
                      (unescaped_string_fragment))))))))))))

================================================================================
Labelled argument and optional argument
================================================================================
fn greeting(name~: String, location~: Option[String] = None) -> Unit {
  match location {
    Some(_) => println("Hi, \{name}!")
    None => println("Hi, \{name} from \{location}!")
  }
}

fn init {
  greeting(name="A")// Hi, A!
  greeting(name="B", location=Some("X"))
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (named_lambda_expression
      (function_identifier
        (lowercase_identifier))
      (parameters
        (parameter
          (parameter_label
            (lowercase_identifier))
          (type_annotation
            (colon)
            (type
              (apply_type
                (qualified_type_identifier
                  (identifier
                    (uppercase_identifier)))))))
        (parameter
          (parameter_label
            (lowercase_identifier))
          (type_annotation
            (colon)
            (type
              (apply_type
                (qualified_type_identifier
                  (identifier
                    (uppercase_identifier)))
                (type_arguments
                  (type
                    (apply_type
                      (qualified_type_identifier
                        (identifier
                          (uppercase_identifier)))))))))
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (constructor_expression
                    (uppercase_identifier))))))))
      (return_type
        (type
          (apply_type
            (qualified_type_identifier
              (identifier
                (uppercase_identifier))))))
      (block_expression
        (statement_expression
          (expression
            (match_expression
              (compound_expression
                (simple_expression
                  (qualified_identifier
                    (lowercase_identifier))))
              (case_clause
                (pattern
                  (simple_pattern
                    (constructor_pattern
                      (constructor_expression
                        (uppercase_identifier))
                      (constructor_pattern_argument
                        (pattern
                          (simple_pattern))))))
                (statement_expression
                  (expression
                    (pipeline_expression
                      (compound_expression
                        (simple_expression
                          (apply_expression
                            (simple_expression
                              (qualified_identifier
                                (lowercase_identifier)))
                            (argument
                              (expression
                                (pipeline_expression
                                  (compound_expression
                                    (simple_expression
                                      (atomic_expression
                                        (string_interpolation
                                          (string_fragment
                                            (unescaped_string_fragment))
                                          (interpolator
                                            (expression
                                              (pipeline_expression
                                                (compound_expression
                                                  (simple_expression
                                                    (qualified_identifier
                                                      (lowercase_identifier)))))))
                                          (string_fragment
                                            (unescaped_string_fragment))))))))))))))))
              (semicolon
                (automatic_semicolon))
              (case_clause
                (pattern
                  (simple_pattern
                    (constructor_pattern
                      (constructor_expression
                        (uppercase_identifier)))))
                (statement_expression
                  (expression
                    (pipeline_expression
                      (compound_expression
                        (simple_expression
                          (apply_expression
                            (simple_expression
                              (qualified_identifier
                                (lowercase_identifier)))
                            (argument
                              (expression
                                (pipeline_expression
                                  (compound_expression
                                    (simple_expression
                                      (atomic_expression
                                        (string_interpolation
                                          (string_fragment
                                            (unescaped_string_fragment))
                                          (interpolator
                                            (expression
                                              (pipeline_expression
                                                (compound_expression
                                                  (simple_expression
                                                    (qualified_identifier
                                                      (lowercase_identifier)))))))
                                          (string_fragment
                                            (unescaped_string_fragment))
                                          (interpolator
                                            (expression
                                              (pipeline_expression
                                                (compound_expression
                                                  (simple_expression
                                                    (qualified_identifier
                                                      (lowercase_identifier)))))))
                                          (string_fragment
                                            (unescaped_string_fragment))))))))))))))))
              (semicolon
                (automatic_semicolon)))))
        (semicolon
          (automatic_semicolon)))))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (apply_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))
                    (argument
                      (argument_label
                        (simple_expression
                          (qualified_identifier
                            (lowercase_identifier))))
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (string_literal
                                    (string_fragment
                                      (unescaped_string_fragment))))))))))))))))
        (comment)
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (apply_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))
                    (argument
                      (argument_label
                        (simple_expression
                          (qualified_identifier
                            (lowercase_identifier))))
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (string_literal
                                    (string_fragment
                                      (unescaped_string_fragment))))))))))
                    (argument
                      (argument_label
                        (simple_expression
                          (qualified_identifier
                            (lowercase_identifier))))
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (apply_expression
                                (simple_expression
                                  (constructor_expression
                                    (uppercase_identifier)))
                                (argument
                                  (expression
                                    (pipeline_expression
                                      (compound_expression
                                        (simple_expression
                                          (atomic_expression
                                            (literal
                                              (string_literal
                                                (string_fragment
                                                  (unescaped_string_fragment))))))))))))))))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
impl
================================================================================
pub impl[X: Value] Value for Double[X] with to_tensor(self : Double) -> Tensor {
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (impl_definition
      (visibility)
      (type_parameters
        (type_identifier
          (identifier
            (uppercase_identifier))
          (colon)
          (constraints
            (constraint
              (qualified_type_identifier
                (identifier
                  (uppercase_identifier)))))))
      (type_name
        (qualified_type_identifier
          (identifier
            (uppercase_identifier))))
      (for_keyword)
      (type
        (apply_type
          (qualified_type_identifier
            (identifier
              (uppercase_identifier)))
          (type_arguments
            (type
              (apply_type
                (qualified_type_identifier
                  (identifier
                    (uppercase_identifier))))))))
      (function_identifier
        (lowercase_identifier))
      (parameters
        (parameter
          (lowercase_identifier)
          (type_annotation
            (colon)
            (type
              (apply_type
                (qualified_type_identifier
                  (identifier
                    (uppercase_identifier))))))))
      (return_type
        (type
          (apply_type
            (qualified_type_identifier
              (identifier
                (uppercase_identifier))))))
      (block_expression))))

================================================================================
extern function definitions
================================================================================
pub(readonly) extern "js" fn ffi[X](a: X) -> R = "a" "b"
priv extern "wasm" fn ffi[X](a: X) -> R =
  #|(func (param i32))
pub extern "wasm-gc" fn ffi(a: X) = #|(func (result i32))
extern "c" fn ffi(a: Int) = "return 0"
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (named_lambda_expression
      (visibility
        (pub_attribute))
      (external_linkage
        (string_literal
          (string_fragment
            (unescaped_string_fragment))))
      (function_identifier
        (lowercase_identifier))
      (type_parameters
        (type_identifier
          (identifier
            (uppercase_identifier))))
      (parameters
        (parameter
          (lowercase_identifier)
          (type_annotation
            (colon)
            (type
              (apply_type
                (qualified_type_identifier
                  (identifier
                    (uppercase_identifier))))))))
      (return_type
        (type
          (apply_type
            (qualified_type_identifier
              (identifier
                (uppercase_identifier))))))
      (external_source
        (string_literal
          (string_fragment
            (unescaped_string_fragment)))
        (string_literal
          (string_fragment
            (unescaped_string_fragment))))))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (named_lambda_expression
      (visibility)
      (external_linkage
        (string_literal
          (string_fragment
            (unescaped_string_fragment))))
      (function_identifier
        (lowercase_identifier))
      (type_parameters
        (type_identifier
          (identifier
            (uppercase_identifier))))
      (parameters
        (parameter
          (lowercase_identifier)
          (type_annotation
            (colon)
            (type
              (apply_type
                (qualified_type_identifier
                  (identifier
                    (uppercase_identifier))))))))
      (return_type
        (type
          (apply_type
            (qualified_type_identifier
              (identifier
                (uppercase_identifier))))))
      (external_source
        (multiline_string_literal
          (multiline_string_fragment
            (multiline_string_separator)
            (multiline_string_content))))))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (named_lambda_expression
      (visibility)
      (external_linkage
        (string_literal
          (string_fragment
            (unescaped_string_fragment))))
      (function_identifier
        (lowercase_identifier))
      (parameters
        (parameter
          (lowercase_identifier)
          (type_annotation
            (colon)
            (type
              (apply_type
                (qualified_type_identifier
                  (identifier
                    (uppercase_identifier))))))))
      (external_source
        (multiline_string_literal
          (multiline_string_fragment
            (multiline_string_separator)
            (multiline_string_content))))))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (named_lambda_expression
      (external_linkage
        (string_literal
          (string_fragment
            (unescaped_string_fragment))))
      (function_identifier
        (lowercase_identifier))
      (parameters
        (parameter
          (lowercase_identifier)
          (type_annotation
            (colon)
            (type
              (apply_type
                (qualified_type_identifier
                  (identifier
                    (uppercase_identifier))))))))
      (external_source
        (string_literal
          (string_fragment
            (unescaped_string_fragment)))))))

================================================================================
Const definition
================================================================================
const A = 'a'
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (const_definition
      (uppercase_identifier)
      (expression
        (pipeline_expression
          (compound_expression
            (simple_expression
              (atomic_expression
                (literal
                  (char_literal))))))))))

================================================================================
Function definition with local types
================================================================================
pub fn Tensor::compile[T](self : Tensor[T]) -> @expr.Expr {
  struct Context {
    args : Array[@type.Type]
    vals : Array[FixedArray[T]]
    idxs : Int
  }
  fn compile(self : Tensor) -> @expr.Expr {
  }

  compile(self)
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (named_lambda_expression
      (visibility)
      (function_identifier
        (type_name
          (qualified_type_identifier
            (identifier
              (uppercase_identifier))))
        (colon_colon)
        (lowercase_identifier))
      (type_parameters
        (type_identifier
          (identifier
            (uppercase_identifier))))
      (parameters
        (parameter
          (lowercase_identifier)
          (type_annotation
            (colon)
            (type
              (apply_type
                (qualified_type_identifier
                  (identifier
                    (uppercase_identifier)))
                (type_arguments
                  (type
                    (apply_type
                      (qualified_type_identifier
                        (identifier
                          (uppercase_identifier)))))))))))
      (return_type
        (type
          (apply_type
            (qualified_type_identifier
              (package_identifier)
              (dot_identifier
                (dot_uppercase_identifier))))))
      (block_expression
        (statement_expression
          (struct_definition
            (identifier
              (uppercase_identifier))
            (struct_field_declaration
              (lowercase_identifier)
              (colon)
              (type
                (apply_type
                  (qualified_type_identifier
                    (identifier
                      (uppercase_identifier)))
                  (type_arguments
                    (type
                      (apply_type
                        (qualified_type_identifier
                          (package_identifier)
                          (dot_identifier
                            (dot_uppercase_identifier)))))))))
            (semicolon
              (automatic_semicolon))
            (struct_field_declaration
              (lowercase_identifier)
              (colon)
              (type
                (apply_type
                  (qualified_type_identifier
                    (identifier
                      (uppercase_identifier)))
                  (type_arguments
                    (type
                      (apply_type
                        (qualified_type_identifier
                          (identifier
                            (uppercase_identifier)))
                        (type_arguments
                          (type
                            (apply_type
                              (qualified_type_identifier
                                (identifier
                                  (uppercase_identifier))))))))))))
            (semicolon
              (automatic_semicolon))
            (struct_field_declaration
              (lowercase_identifier)
              (colon)
              (type
                (apply_type
                  (qualified_type_identifier
                    (identifier
                      (uppercase_identifier))))))
            (semicolon
              (automatic_semicolon))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (named_lambda_expression
            (function_identifier
              (lowercase_identifier))
            (parameters
              (parameter
                (lowercase_identifier)
                (type_annotation
                  (colon)
                  (type
                    (apply_type
                      (qualified_type_identifier
                        (identifier
                          (uppercase_identifier))))))))
            (return_type
              (type
                (apply_type
                  (qualified_type_identifier
                    (package_identifier)
                    (dot_identifier
                      (dot_uppercase_identifier))))))
            (block_expression)))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (apply_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))
                    (argument
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (qualified_identifier
                                (lowercase_identifier)))))))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
Type alias definitions
================================================================================
typealias X = Int
priv typealias X = Double
pub (readonly) typealias X = Tensor
typealias X[t] = Y[T]
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (type_alias_definition
      (identifier
        (uppercase_identifier))
      (type
        (apply_type
          (qualified_type_identifier
            (identifier
              (uppercase_identifier)))))))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (type_alias_definition
      (visibility)
      (identifier
        (uppercase_identifier))
      (type
        (apply_type
          (qualified_type_identifier
            (identifier
              (uppercase_identifier)))))))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (type_alias_definition
      (visibility
        (pub_attribute))
      (identifier
        (uppercase_identifier))
      (type
        (apply_type
          (qualified_type_identifier
            (identifier
              (uppercase_identifier)))))))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (type_alias_definition
      (identifier
        (uppercase_identifier))
      (type_parameters
        (type_identifier
          (identifier
            (lowercase_identifier))))
      (type
        (apply_type
          (qualified_type_identifier
            (identifier
              (uppercase_identifier)))
          (type_arguments
            (type
              (apply_type
                (qualified_type_identifier
                  (identifier
                    (uppercase_identifier)))))))))))
