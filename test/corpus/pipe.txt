================================================================================
pipe
================================================================================
fn init {
  let a = 4
    |> 3
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (binary_expression
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal)))))
                    (pipe_operator)
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal)))))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
pipe (left aligned)
================================================================================
fn init {
  let a = 4
|> 3
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (binary_expression
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal)))))
                    (pipe_operator)
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal)))))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
pipe (multiple empty line)
================================================================================
fn init {
  let a = 4



|> 3
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (binary_expression
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal)))))
                    (pipe_operator)
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal)))))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
pipe (multiple empty line with spaces)
================================================================================
fn init {
  let a = 4  

  

|> 3
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (binary_expression
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal)))))
                    (pipe_operator)
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal)))))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
pipe (comment)
================================================================================
fn init {
  let a = 4 // a
|> 3
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (binary_expression
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal)))))
                    (comment)
                    (pipe_operator)
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal)))))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
pipe (multi line with single line comment)
================================================================================
fn init {
  let a = 4 // a

// b

// c
|> 3
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (binary_expression
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal)))))
                    (comment)
                    (comment)
                    (comment)
                    (pipe_operator)
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal)))))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
pipe (multi line with single line comment, not left aligned)
================================================================================
fn init {
  let a = 4 // a

// b

// c
  |> 3
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (binary_expression
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal)))))
                    (comment)
                    (comment)
                    (comment)
                    (pipe_operator)
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal)))))))))))
        (semicolon
          (automatic_semicolon))))))
