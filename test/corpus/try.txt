================================================================================
try
================================================================================
fn main {
  try {
    println("hello")
  } catch {
    _ => ()
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (try_expression
              (expression
                (pipeline_expression
                  (compound_expression
                    (simple_expression
                      (nonempty_block_expression
                        (statement_expression
                          (expression
                            (pipeline_expression
                              (compound_expression
                                (simple_expression
                                  (apply_expression
                                    (simple_expression
                                      (qualified_identifier
                                        (lowercase_identifier)))
                                    (argument
                                      (expression
                                        (pipeline_expression
                                          (compound_expression
                                            (simple_expression
                                              (atomic_expression
                                                (literal
                                                  (string_literal
                                                    (string_fragment
                                                      (unescaped_string_fragment))))))))))))))))
                        (semicolon
                          (automatic_semicolon)))))))
              (case_clause
                (pattern
                  (simple_pattern))
                (statement_expression
                  (expression
                    (pipeline_expression
                      (compound_expression
                        (simple_expression
                          (unit_expression)))))))
              (semicolon
                (automatic_semicolon)))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
try with no catch
================================================================================
fn main {
  try {
    println("hello")
  } {
    _ => ()
  }
  try println("Hello") {
    _ => ()
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (try_expression
              (expression
                (pipeline_expression
                  (compound_expression
                    (simple_expression
                      (nonempty_block_expression
                        (statement_expression
                          (expression
                            (pipeline_expression
                              (compound_expression
                                (simple_expression
                                  (apply_expression
                                    (simple_expression
                                      (qualified_identifier
                                        (lowercase_identifier)))
                                    (argument
                                      (expression
                                        (pipeline_expression
                                          (compound_expression
                                            (simple_expression
                                              (atomic_expression
                                                (literal
                                                  (string_literal
                                                    (string_fragment
                                                      (unescaped_string_fragment))))))))))))))))
                        (semicolon
                          (automatic_semicolon)))))))
              (case_clause
                (pattern
                  (simple_pattern))
                (statement_expression
                  (expression
                    (pipeline_expression
                      (compound_expression
                        (simple_expression
                          (unit_expression)))))))
              (semicolon
                (automatic_semicolon)))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (try_expression
              (expression
                (pipeline_expression
                  (compound_expression
                    (simple_expression
                      (apply_expression
                        (simple_expression
                          (qualified_identifier
                            (lowercase_identifier)))
                        (argument
                          (expression
                            (pipeline_expression
                              (compound_expression
                                (simple_expression
                                  (atomic_expression
                                    (literal
                                      (string_literal
                                        (string_fragment
                                          (unescaped_string_fragment)))))))))))))))
              (case_clause
                (pattern
                  (simple_pattern))
                (statement_expression
                  (expression
                    (pipeline_expression
                      (compound_expression
                        (simple_expression
                          (unit_expression)))))))
              (semicolon
                (automatic_semicolon)))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
try with catch all
================================================================================
fn main {
  try {
    println("hello")
  } catch! {
    _ => ()
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (try_expression
              (expression
                (pipeline_expression
                  (compound_expression
                    (simple_expression
                      (nonempty_block_expression
                        (statement_expression
                          (expression
                            (pipeline_expression
                              (compound_expression
                                (simple_expression
                                  (apply_expression
                                    (simple_expression
                                      (qualified_identifier
                                        (lowercase_identifier)))
                                    (argument
                                      (expression
                                        (pipeline_expression
                                          (compound_expression
                                            (simple_expression
                                              (atomic_expression
                                                (literal
                                                  (string_literal
                                                    (string_fragment
                                                      (unescaped_string_fragment))))))))))))))))
                        (semicolon
                          (automatic_semicolon)))))))
              (case_clause
                (pattern
                  (simple_pattern))
                (statement_expression
                  (expression
                    (pipeline_expression
                      (compound_expression
                        (simple_expression
                          (unit_expression)))))))
              (semicolon
                (automatic_semicolon)))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
try with else
================================================================================
fn main {
  try {
    println("hello")
  } catch {
    _ => ()
  } else {
    _ => 1 + 1
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (try_expression
              (expression
                (pipeline_expression
                  (compound_expression
                    (simple_expression
                      (nonempty_block_expression
                        (statement_expression
                          (expression
                            (pipeline_expression
                              (compound_expression
                                (simple_expression
                                  (apply_expression
                                    (simple_expression
                                      (qualified_identifier
                                        (lowercase_identifier)))
                                    (argument
                                      (expression
                                        (pipeline_expression
                                          (compound_expression
                                            (simple_expression
                                              (atomic_expression
                                                (literal
                                                  (string_literal
                                                    (string_fragment
                                                      (unescaped_string_fragment))))))))))))))))
                        (semicolon
                          (automatic_semicolon)))))))
              (case_clause
                (pattern
                  (simple_pattern))
                (statement_expression
                  (expression
                    (pipeline_expression
                      (compound_expression
                        (simple_expression
                          (unit_expression)))))))
              (semicolon
                (automatic_semicolon))
              (try_else_clause
                (case_clause
                  (pattern
                    (simple_pattern))
                  (statement_expression
                    (expression
                      (pipeline_expression
                        (compound_expression
                          (binary_expression
                            (compound_expression
                              (simple_expression
                                (atomic_expression
                                  (literal
                                    (integer_literal)))))
                            (compound_expression
                              (simple_expression
                                (atomic_expression
                                  (literal
                                    (integer_literal)))))))))))
                (semicolon
                  (automatic_semicolon))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
try with multiple catch clauses
================================================================================
fn main {
  try {
    println("hello")
  } catch {
    Error1(_) => ()
    Error2(_) => ()
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (try_expression
              (expression
                (pipeline_expression
                  (compound_expression
                    (simple_expression
                      (nonempty_block_expression
                        (statement_expression
                          (expression
                            (pipeline_expression
                              (compound_expression
                                (simple_expression
                                  (apply_expression
                                    (simple_expression
                                      (qualified_identifier
                                        (lowercase_identifier)))
                                    (argument
                                      (expression
                                        (pipeline_expression
                                          (compound_expression
                                            (simple_expression
                                              (atomic_expression
                                                (literal
                                                  (string_literal
                                                    (string_fragment
                                                      (unescaped_string_fragment))))))))))))))))
                        (semicolon
                          (automatic_semicolon)))))))
              (case_clause
                (pattern
                  (simple_pattern
                    (constructor_pattern
                      (constructor_expression
                        (uppercase_identifier))
                      (constructor_pattern_argument
                        (pattern
                          (simple_pattern))))))
                (statement_expression
                  (expression
                    (pipeline_expression
                      (compound_expression
                        (simple_expression
                          (unit_expression)))))))
              (semicolon
                (automatic_semicolon))
              (case_clause
                (pattern
                  (simple_pattern
                    (constructor_pattern
                      (constructor_expression
                        (uppercase_identifier))
                      (constructor_pattern_argument
                        (pattern
                          (simple_pattern))))))
                (statement_expression
                  (expression
                    (pipeline_expression
                      (compound_expression
                        (simple_expression
                          (unit_expression)))))))
              (semicolon
                (automatic_semicolon)))))
        (semicolon
          (automatic_semicolon))))))
