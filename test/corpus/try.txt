================================================================================
try
================================================================================
fn main {
  try {
    println("hello")
  } catch {
    _ => ()
  }
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (expression
            (try_expression
              (expression
                (compound_expression
                  (simple_expression
                    (nonempty_block_expression
                      (statement_expression
                        (expression
                          (compound_expression
                            (simple_expression
                              (apply_expression
                                (simple_expression
                                  (qualified_identifier
                                    (lowercase_identifier)))
                                (arguments
                                  (argument
                                    (expression
                                      (compound_expression
                                        (simple_expression
                                          (atomic_expression
                                            (literal
                                              (string_literal
                                                (string_fragment
                                                  (unescaped_string_fragment)))))))))))))))))))
              (try_catch_clause
                (case_clause
                  (pattern
                    (simple_pattern))
                  (statement_expression
                    (expression
                      (compound_expression
                        (simple_expression
                          (unit_expression))))))))))))))

================================================================================
try with no catch
================================================================================
fn main {
  try {
    println("hello")
  } {
    _ => ()
  }
  try println("Hello") {
    _ => ()
  }
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (expression
            (try_expression
              (expression
                (compound_expression
                  (simple_expression
                    (nonempty_block_expression
                      (statement_expression
                        (expression
                          (compound_expression
                            (simple_expression
                              (apply_expression
                                (simple_expression
                                  (qualified_identifier
                                    (lowercase_identifier)))
                                (arguments
                                  (argument
                                    (expression
                                      (compound_expression
                                        (simple_expression
                                          (atomic_expression
                                            (literal
                                              (string_literal
                                                (string_fragment
                                                  (unescaped_string_fragment)))))))))))))))))))
              (try_catch_clause
                (case_clause
                  (pattern
                    (simple_pattern))
                  (statement_expression
                    (expression
                      (compound_expression
                        (simple_expression
                          (unit_expression))))))))))
        (statement_expression
          (expression
            (try_expression
              (expression
                (compound_expression
                  (simple_expression
                    (apply_expression
                      (simple_expression
                        (qualified_identifier
                          (lowercase_identifier)))
                      (arguments
                        (argument
                          (expression
                            (compound_expression
                              (simple_expression
                                (atomic_expression
                                  (literal
                                    (string_literal
                                      (string_fragment
                                        (unescaped_string_fragment))))))))))))))
              (try_catch_clause
                (case_clause
                  (pattern
                    (simple_pattern))
                  (statement_expression
                    (expression
                      (compound_expression
                        (simple_expression
                          (unit_expression))))))))))))))

================================================================================
try with catch all
================================================================================
fn main {
  try {
    println("hello")
  } catch! {
    _ => ()
  }
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (expression
            (try_expression
              (expression
                (compound_expression
                  (simple_expression
                    (nonempty_block_expression
                      (statement_expression
                        (expression
                          (compound_expression
                            (simple_expression
                              (apply_expression
                                (simple_expression
                                  (qualified_identifier
                                    (lowercase_identifier)))
                                (arguments
                                  (argument
                                    (expression
                                      (compound_expression
                                        (simple_expression
                                          (atomic_expression
                                            (literal
                                              (string_literal
                                                (string_fragment
                                                  (unescaped_string_fragment)))))))))))))))))))
              (try_catch_clause
                (case_clause
                  (pattern
                    (simple_pattern))
                  (statement_expression
                    (expression
                      (compound_expression
                        (simple_expression
                          (unit_expression))))))))))))))

================================================================================
try with else
================================================================================
fn main {
  try {
    println("hello")
  } catch {
    _ => ()
  } else {
    _ => 1 + 1
  }
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (expression
            (try_expression
              (expression
                (compound_expression
                  (simple_expression
                    (nonempty_block_expression
                      (statement_expression
                        (expression
                          (compound_expression
                            (simple_expression
                              (apply_expression
                                (simple_expression
                                  (qualified_identifier
                                    (lowercase_identifier)))
                                (arguments
                                  (argument
                                    (expression
                                      (compound_expression
                                        (simple_expression
                                          (atomic_expression
                                            (literal
                                              (string_literal
                                                (string_fragment
                                                  (unescaped_string_fragment)))))))))))))))))))
              (try_catch_clause
                (case_clause
                  (pattern
                    (simple_pattern))
                  (statement_expression
                    (expression
                      (compound_expression
                        (simple_expression
                          (unit_expression)))))))
              (try_else_clause
                (case_clause
                  (pattern
                    (simple_pattern))
                  (statement_expression
                    (expression
                      (compound_expression
                        (binary_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (integer_literal)))))
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (integer_literal))))))))))))))))))

================================================================================
try with multiple catch clauses
================================================================================
fn main {
  try {
    println("hello")
  } catch {
    Error1(_) => ()
    Error2(_) => ()
  }
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (expression
            (try_expression
              (expression
                (compound_expression
                  (simple_expression
                    (nonempty_block_expression
                      (statement_expression
                        (expression
                          (compound_expression
                            (simple_expression
                              (apply_expression
                                (simple_expression
                                  (qualified_identifier
                                    (lowercase_identifier)))
                                (arguments
                                  (argument
                                    (expression
                                      (compound_expression
                                        (simple_expression
                                          (atomic_expression
                                            (literal
                                              (string_literal
                                                (string_fragment
                                                  (unescaped_string_fragment)))))))))))))))))))
              (try_catch_clause
                (case_clause
                  (pattern
                    (simple_pattern
                      (constructor_pattern
                        (constructor_expression
                          (uppercase_identifier))
                        (constructor_pattern_argument
                          (pattern
                            (simple_pattern))))))
                  (statement_expression
                    (expression
                      (compound_expression
                        (simple_expression
                          (unit_expression))))))
                (case_clause
                  (pattern
                    (simple_pattern
                      (constructor_pattern
                        (constructor_expression
                          (uppercase_identifier))
                        (constructor_pattern_argument
                          (pattern
                            (simple_pattern))))))
                  (statement_expression
                    (expression
                      (compound_expression
                        (simple_expression
                          (unit_expression))))))))))))))

================================================================================
try question expression
================================================================================
fn main {
  try? f(true)
  try? f(true) |> ignore()
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (expression
            (try_question_expression
              (expression
                (compound_expression
                  (simple_expression
                    (apply_expression
                      (simple_expression
                        (qualified_identifier
                          (lowercase_identifier)))
                      (arguments
                        (argument
                          (expression
                            (compound_expression
                              (simple_expression
                                (atomic_expression
                                  (literal
                                    (boolean_literal)))))))))))))))
        (statement_expression
          (expression
            (try_question_expression
              (expression
                (compound_expression
                  (binary_expression
                    (compound_expression
                      (simple_expression
                        (apply_expression
                          (simple_expression
                            (qualified_identifier
                              (lowercase_identifier)))
                          (arguments
                            (argument
                              (expression
                                (compound_expression
                                  (simple_expression
                                    (atomic_expression
                                      (literal
                                        (boolean_literal)))))))))))
                    (compound_expression
                      (simple_expression
                        (apply_expression
                          (simple_expression
                            (qualified_identifier
                              (lowercase_identifier)))
                          (arguments))))))))))))))
