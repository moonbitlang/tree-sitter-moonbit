================================================================================
loop expression
================================================================================
fn init {
  let x = loop x, 0 {
    a, b => continue c, d
    e, f => g
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (loop_expression
                (expression
                  (pipeline_expression
                    (compound_expression
                      (simple_expression
                        (qualified_identifier
                          (lowercase_identifier))))))
                (expression
                  (pipeline_expression
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal)))))))
                (matrix_case_clause
                  (pattern
                    (simple_pattern
                      (lowercase_identifier)))
                  (pattern
                    (simple_pattern
                      (lowercase_identifier)))
                  (statement_expression
                    (continue_expression
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (qualified_identifier
                                (lowercase_identifier))))))
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (qualified_identifier
                                (lowercase_identifier)))))))))
                (semicolon
                  (automatic_semicolon))
                (matrix_case_clause
                  (pattern
                    (simple_pattern
                      (lowercase_identifier)))
                  (pattern
                    (simple_pattern
                      (lowercase_identifier)))
                  (statement_expression
                    (expression
                      (pipeline_expression
                        (compound_expression
                          (simple_expression
                            (qualified_identifier
                              (lowercase_identifier))))))))
                (semicolon
                  (automatic_semicolon))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
loop expression with multiple argument
================================================================================
fn init {
  let x = loop x, 0, 1 {
    a, b, c => continue c, d
    e, f => g
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (loop_expression
                (expression
                  (pipeline_expression
                    (compound_expression
                      (simple_expression
                        (qualified_identifier
                          (lowercase_identifier))))))
                (expression
                  (pipeline_expression
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal)))))))
                (expression
                  (pipeline_expression
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal)))))))
                (matrix_case_clause
                  (pattern
                    (simple_pattern
                      (lowercase_identifier)))
                  (pattern
                    (simple_pattern
                      (lowercase_identifier)))
                  (pattern
                    (simple_pattern
                      (lowercase_identifier)))
                  (statement_expression
                    (continue_expression
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (qualified_identifier
                                (lowercase_identifier))))))
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (qualified_identifier
                                (lowercase_identifier)))))))))
                (semicolon
                  (automatic_semicolon))
                (matrix_case_clause
                  (pattern
                    (simple_pattern
                      (lowercase_identifier)))
                  (pattern
                    (simple_pattern
                      (lowercase_identifier)))
                  (statement_expression
                    (expression
                      (pipeline_expression
                        (compound_expression
                          (simple_expression
                            (qualified_identifier
                              (lowercase_identifier))))))))
                (semicolon
                  (automatic_semicolon))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
loop expression with label
================================================================================
fn init {
  ll~: loop x, 0 {
    a, b => continue ll~ c, d
    e, f => break ll~ Some(g)
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (loop_expression
              (loop_label
                (lowercase_identifier))
              (expression
                (pipeline_expression
                  (compound_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier))))))
              (expression
                (pipeline_expression
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal)))))))
              (matrix_case_clause
                (pattern
                  (simple_pattern
                    (lowercase_identifier)))
                (pattern
                  (simple_pattern
                    (lowercase_identifier)))
                (statement_expression
                  (continue_expression
                    (parameter_label
                      (lowercase_identifier))
                    (expression
                      (pipeline_expression
                        (compound_expression
                          (simple_expression
                            (qualified_identifier
                              (lowercase_identifier))))))
                    (expression
                      (pipeline_expression
                        (compound_expression
                          (simple_expression
                            (qualified_identifier
                              (lowercase_identifier)))))))))
              (semicolon
                (automatic_semicolon))
              (matrix_case_clause
                (pattern
                  (simple_pattern
                    (lowercase_identifier)))
                (pattern
                  (simple_pattern
                    (lowercase_identifier)))
                (statement_expression
                  (break_expression
                    (parameter_label
                      (lowercase_identifier))
                    (expression
                      (pipeline_expression
                        (compound_expression
                          (simple_expression
                            (apply_expression
                              (simple_expression
                                (constructor_expression
                                  (uppercase_identifier)))
                              (argument
                                (expression
                                  (pipeline_expression
                                    (compound_expression
                                      (simple_expression
                                        (qualified_identifier
                                          (lowercase_identifier)))))))))))))))
              (semicolon
                (automatic_semicolon)))))
        (semicolon
          (automatic_semicolon))))))
