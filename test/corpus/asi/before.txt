================================================================================
can occur before semi (MULTILINE_STRING)
================================================================================
fn main {
  #|1
  // a
  $|2
  // c
  #|3
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (atomic_expression
                    (literal
                      (multiline_string_literal
                        (multiline_string_fragment
                          (multiline_string_separator)
                          (multiline_string_content))
                        (comment)
                        (automatic_newline)
                        (multiline_interpolation_fragment
                          (multiline_interpolation_separator)
                          (multiline_interpolation_content))
                        (comment)
                        (automatic_newline)
                        (multiline_string_fragment
                          (multiline_string_separator)
                          (multiline_string_content))))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur before semi (RBRACE, RBRACKET, RPAREN)
================================================================================
fn main {
  { a }
  [ a ]
  ( a )
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (nonempty_block_expression
                    (statement_expression
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (qualified_identifier
                                (lowercase_identifier)))))))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (array_expression
                    (expression
                      (pipeline_expression
                        (compound_expression
                          (simple_expression
                            (qualified_identifier
                              (lowercase_identifier))))))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (tuple_expression
                    (expression
                      (pipeline_expression
                        (compound_expression
                          (simple_expression
                            (qualified_identifier
                              (lowercase_identifier))))))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur before semi (BREAK, CONTINUE, RETURN)
================================================================================
fn main {
  break
  1
  continue
  2
  return
  4
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (break_expression))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (atomic_expression
                    (literal
                      (integer_literal))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (continue_expression))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (atomic_expression
                    (literal
                      (integer_literal))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (return_expression))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (atomic_expression
                    (literal
                      (integer_literal))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur before semi (PLUS, MINUS)
================================================================================
fn main {
  let x = 1 +
    2
  let x = 1 -
    2
}

fn f[X: Default +
  Clone]() -> Unit {
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (binary_expression
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal)))))
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal)))))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (binary_expression
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal)))))
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal)))))))))))
        (semicolon
          (automatic_semicolon)))))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (named_lambda_expression
      (function_identifier
        (lowercase_identifier))
      (type_parameters
        (type_identifier
          (identifier
            (uppercase_identifier))
          (colon)
          (constraints
            (constraint
              (qualified_type_identifier
                (identifier
                  (uppercase_identifier))))
            (constraint
              (qualified_type_identifier
                (identifier
                  (uppercase_identifier)))))))
      (parameters)
      (return_type
        (type
          (apply_type
            (qualified_type_identifier
              (identifier
                (uppercase_identifier))))))
      (block_expression))))

================================================================================
can occur before semi (PACKAGE_NAME)
================================================================================
fn main {
  let x = @a
    .T
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (constructor_expression
                      (package_identifier)
                      (dot_uppercase_identifier))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur before semi (LET, MUTABLE)
================================================================================
fn main {
  let
    y = 2
  let mut
    x = 3
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (atomic_expression
                      (literal
                        (integer_literal)))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (let_mut_expression
            (lowercase_identifier)
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (atomic_expression
                      (literal
                        (integer_literal)))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur before semi (MATCH)
================================================================================
fn main {
  match
    x {
    _ => ()
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (match_expression
              (compound_expression
                (simple_expression
                  (qualified_identifier
                    (lowercase_identifier))))
              (case_clause
                (pattern
                  (simple_pattern))
                (statement_expression
                  (expression
                    (pipeline_expression
                      (compound_expression
                        (simple_expression
                          (unit_expression)))))))
              (semicolon
                (automatic_semicolon)))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur before semi (TRY)
================================================================================
fn main {
  try
  f() catch {}
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (try_expression
              (expression
                (pipeline_expression
                  (compound_expression
                    (simple_expression
                      (apply_expression
                        (simple_expression
                          (qualified_identifier
                            (lowercase_identifier)))))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur before semi (CATCH)
================================================================================
fn main {
  try f() catch
  {
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (try_expression
              (expression
                (pipeline_expression
                  (compound_expression
                    (simple_expression
                      (apply_expression
                        (simple_expression
                          (qualified_identifier
                            (lowercase_identifier)))))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur before semi (LPAREN)
================================================================================
fn main {
  f(
    1)
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (apply_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))
                    (argument
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (integer_literal))))))))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur before semi (CONST)
================================================================================
const
  C = 1
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (const_definition
      (uppercase_identifier)
      (expression
        (pipeline_expression
          (compound_expression
            (simple_expression
              (atomic_expression
                (literal
                  (integer_literal))))))))))

================================================================================
can occur before semi (LBRACKET)
================================================================================
fn main {
  a[
    1]
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (array_access_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))
                    (expression
                      (pipeline_expression
                        (compound_expression
                          (simple_expression
                            (atomic_expression
                              (literal
                                (integer_literal)))))))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur before semi (LBRACE)
================================================================================
fn main {
  {
    a
  }
  T::{
    a
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (nonempty_block_expression
                    (statement_expression
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (qualified_identifier
                                (lowercase_identifier)))))))
                    (semicolon
                      (automatic_semicolon))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (struct_expression
                    (type_name
                      (qualified_type_identifier
                        (identifier
                          (uppercase_identifier))))
                    (colon_colon)
                    (struct_field_expression
                      (labeled_expression_pun
                        (lowercase_identifier)))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur before semi (INFIX1)
================================================================================
fn main {
  1 >
  2
  2 <
  3
  3 ==
  4
  5 !=
  6
  7 >=
  8
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (binary_expression
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal)))))
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal))))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (binary_expression
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal)))))
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal))))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (binary_expression
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal)))))
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal))))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (binary_expression
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal)))))
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal))))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (binary_expression
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal)))))
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal))))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur before semi (INFIX2)
================================================================================
fn main {
  1 >>
  2
  3 <<
  4
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (binary_expression
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal)))))
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal))))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (binary_expression
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal)))))
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal))))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur before semi (PLUS, MINUS)
================================================================================
fn main {
  1 +
  2
  3 -
  4
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (binary_expression
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal)))))
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal))))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (binary_expression
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal)))))
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal))))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur before semi (INFIX3)
================================================================================
fn main {
  1 *
  2
  3 /
  4
  5 %
  6
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (binary_expression
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal)))))
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal))))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (binary_expression
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal)))))
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal))))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (binary_expression
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal)))))
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal))))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur before semi (IMPL)
================================================================================
impl
A for B with f() {
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (impl_definition
      (type_name
        (qualified_type_identifier
          (identifier
            (uppercase_identifier))))
      (for_keyword)
      (type
        (apply_type
          (qualified_type_identifier
            (identifier
              (uppercase_identifier)))))
      (function_identifier
        (lowercase_identifier))
      (parameters)
      (block_expression))))

================================================================================
can occur before semi (IF)
================================================================================
fn main {
  if
  true {}
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (if_expression
              (compound_expression
                (simple_expression
                  (atomic_expression
                    (literal
                      (boolean_literal)))))
              (block_expression))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur before semi (GUARD)
================================================================================
fn main {
  guard
  let x =
  1
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (guard_let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (simple_expression
              (atomic_expression
                (literal
                  (integer_literal))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur before semi (WHILE)
================================================================================
fn main {
  while
  true {
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (while_expression
              (compound_expression
                (simple_expression
                  (atomic_expression
                    (literal
                      (boolean_literal)))))
              (block_expression))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur before semi (ASYNC)
================================================================================
async
fn f() {
}

fn main {
  let x = async
  fn {
  }
  async
  fn g() {
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (named_lambda_expression
      (function_identifier
        (lowercase_identifier))
      (parameters)
      (block_expression)))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (anonymous_matrix_lambda_expression)))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (named_lambda_expression
            (function_identifier
              (lowercase_identifier))
            (parameters)
            (block_expression)))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur before semi (FN)
================================================================================
fn
f() {
}

fn main {
  let x =
  fn
  // a
  {
  }
  fn
  // g
  g() {
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (named_lambda_expression
      (function_identifier
        (lowercase_identifier))
      (parameters)
      (block_expression)))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (anonymous_matrix_lambda_expression
                      (comment))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (named_lambda_expression
            (comment)
            (function_identifier
              (lowercase_identifier))
            (parameters)
            (block_expression)))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur before semi (FAT_ARROW)
================================================================================
fn main {
  match x {
    _ =>
      // a
      #|1
      // b
      $|1
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (match_expression
              (compound_expression
                (simple_expression
                  (qualified_identifier
                    (lowercase_identifier))))
              (case_clause
                (pattern
                  (simple_pattern))
                (comment)
                (statement_expression
                  (expression
                    (pipeline_expression
                      (compound_expression
                        (simple_expression
                          (atomic_expression
                            (literal
                              (multiline_string_literal
                                (multiline_string_fragment
                                  (multiline_string_separator)
                                  (multiline_string_content))
                                (comment)
                                (automatic_newline)
                                (multiline_interpolation_fragment
                                  (multiline_interpolation_separator)
                                  (multiline_interpolation_content)))))))))))
              (semicolon
                (automatic_semicolon)))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur before semi (THIN_ARROW)
================================================================================
fn f() ->
/// a
Unit {
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (named_lambda_expression
      (function_identifier
        (lowercase_identifier))
      (parameters)
      (return_type
        (comment)
        (type
          (apply_type
            (qualified_type_identifier
              (identifier
                (uppercase_identifier))))))
      (block_expression))))

================================================================================
can occur before semi (IN)
================================================================================
fn main {
  for x in
  // a
  // b
  [1, 2, 3] {
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (for_in_expression
              (for_keyword)
              (lowercase_identifier)
              (comment)
              (comment)
              (expression
                (pipeline_expression
                  (compound_expression
                    (simple_expression
                      (array_expression
                        (expression
                          (pipeline_expression
                            (compound_expression
                              (simple_expression
                                (atomic_expression
                                  (literal
                                    (integer_literal)))))))
                        (expression
                          (pipeline_expression
                            (compound_expression
                              (simple_expression
                                (atomic_expression
                                  (literal
                                    (integer_literal)))))))
                        (expression
                          (pipeline_expression
                            (compound_expression
                              (simple_expression
                                (atomic_expression
                                  (literal
                                    (integer_literal))))))))))))
              (block_expression))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur before semi (EQUAL)
================================================================================
fn main {
  let x =
  // 3
    3
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (comment)
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (atomic_expression
                      (literal
                        (integer_literal)))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur before semi (AUGMENTED_ASSIGNMENT)
================================================================================
fn main {
  x +=
  2
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (assign_expression
            (left_value
              (qualified_identifier
                (lowercase_identifier)))
            (assign_operator
              (plus_equal))
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (atomic_expression
                      (literal
                        (integer_literal)))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur before semi (ENUM)
================================================================================
enum
// E
E {
  A
  B
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (enum_definition
      (comment)
      (identifier
        (uppercase_identifier))
      (enum_constructor
        (uppercase_identifier))
      (semicolon
        (automatic_semicolon))
      (enum_constructor
        (uppercase_identifier))
      (semicolon
        (automatic_semicolon)))))

================================================================================
can occur before semi (ELSE)
================================================================================
fn main {
  if a {
  } else
  // a
  {
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (if_expression
              (compound_expression
                (simple_expression
                  (qualified_identifier
                    (lowercase_identifier))))
              (block_expression)
              (else_clause
                (comment)
                (block_expression)))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur before semi (EXTERN)
================================================================================
extern
"c" fn f() = "a"
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (named_lambda_expression
      (external_linkage
        (string_literal
          (string_fragment
            (unescaped_string_fragment))))
      (function_identifier
        (lowercase_identifier))
      (parameters)
      (external_source
        (string_literal
          (string_fragment
            (unescaped_string_fragment)))))))

================================================================================
can occur before semi (COMMA)
================================================================================
enum E {
  A(Int,
  Int)
}

fn main {
  continue 1,
  2
  (1,
  2)
  loop x,
  y {
  }
  for x = 1,
  y = 2; true; x = x + 1 {
  }
  for x,
  y in [1, 2, 3] {
  }
  T::{
    a,
    b
  }
}

fn f(a: Int,
b: Int) -> Unit {
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (enum_definition
      (identifier
        (uppercase_identifier))
      (enum_constructor
        (uppercase_identifier)
        (constructor_parameter
          (type
            (apply_type
              (qualified_type_identifier
                (identifier
                  (uppercase_identifier))))))
        (constructor_parameter
          (type
            (apply_type
              (qualified_type_identifier
                (identifier
                  (uppercase_identifier)))))))
      (semicolon
        (automatic_semicolon))))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (continue_expression
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (atomic_expression
                      (literal
                        (integer_literal)))))))
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (atomic_expression
                      (literal
                        (integer_literal)))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (tuple_expression
                    (expression
                      (pipeline_expression
                        (compound_expression
                          (simple_expression
                            (atomic_expression
                              (literal
                                (integer_literal)))))))
                    (expression
                      (pipeline_expression
                        (compound_expression
                          (simple_expression
                            (atomic_expression
                              (literal
                                (integer_literal)))))))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (loop_expression
              (expression
                (pipeline_expression
                  (compound_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier))))))
              (expression
                (pipeline_expression
                  (compound_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (for_expression
              (for_keyword)
              (for_binder
                (lowercase_identifier)
                (expression
                  (pipeline_expression
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal))))))))
              (for_binder
                (lowercase_identifier)
                (expression
                  (pipeline_expression
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal))))))))
              (semicolon)
              (compound_expression
                (simple_expression
                  (atomic_expression
                    (literal
                      (boolean_literal)))))
              (semicolon)
              (for_binder
                (lowercase_identifier)
                (expression
                  (pipeline_expression
                    (compound_expression
                      (binary_expression
                        (compound_expression
                          (simple_expression
                            (qualified_identifier
                              (lowercase_identifier))))
                        (compound_expression
                          (simple_expression
                            (atomic_expression
                              (literal
                                (integer_literal))))))))))
              (block_expression))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (for_in_expression
              (for_keyword)
              (lowercase_identifier)
              (lowercase_identifier)
              (expression
                (pipeline_expression
                  (compound_expression
                    (simple_expression
                      (array_expression
                        (expression
                          (pipeline_expression
                            (compound_expression
                              (simple_expression
                                (atomic_expression
                                  (literal
                                    (integer_literal)))))))
                        (expression
                          (pipeline_expression
                            (compound_expression
                              (simple_expression
                                (atomic_expression
                                  (literal
                                    (integer_literal)))))))
                        (expression
                          (pipeline_expression
                            (compound_expression
                              (simple_expression
                                (atomic_expression
                                  (literal
                                    (integer_literal))))))))))))
              (block_expression))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (struct_expression
                    (type_name
                      (qualified_type_identifier
                        (identifier
                          (uppercase_identifier))))
                    (colon_colon)
                    (struct_field_expression
                      (labeled_expression_pun
                        (lowercase_identifier)))
                    (struct_field_expression
                      (labeled_expression_pun
                        (lowercase_identifier)))))))))
        (semicolon
          (automatic_semicolon)))))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (named_lambda_expression
      (function_identifier
        (lowercase_identifier))
      (parameters
        (parameter
          (lowercase_identifier)
          (type_annotation
            (colon)
            (type
              (apply_type
                (qualified_type_identifier
                  (identifier
                    (uppercase_identifier)))))))
        (parameter
          (lowercase_identifier)
          (type_annotation
            (colon)
            (type
              (apply_type
                (qualified_type_identifier
                  (identifier
                    (uppercase_identifier))))))))
      (return_type
        (type
          (apply_type
            (qualified_type_identifier
              (identifier
                (uppercase_identifier))))))
      (block_expression))))

================================================================================
can occur before semi (COLON)
================================================================================
fn f[X :
T](a :
Int) -> Unit {
  T::{
    a :
    // c
    b
  }
  a[1:
  2]
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (named_lambda_expression
      (function_identifier
        (lowercase_identifier))
      (type_parameters
        (type_identifier
          (identifier
            (uppercase_identifier))
          (colon)
          (constraints
            (constraint
              (qualified_type_identifier
                (identifier
                  (uppercase_identifier)))))))
      (parameters
        (parameter
          (lowercase_identifier)
          (type_annotation
            (colon)
            (type
              (apply_type
                (qualified_type_identifier
                  (identifier
                    (uppercase_identifier))))))))
      (return_type
        (type
          (apply_type
            (qualified_type_identifier
              (identifier
                (uppercase_identifier))))))
      (block_expression
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (struct_expression
                    (type_name
                      (qualified_type_identifier
                        (identifier
                          (uppercase_identifier))))
                    (colon_colon)
                    (struct_field_expression
                      (labeled_expression
                        (lowercase_identifier)
                        (colon)
                        (comment)
                        (expression
                          (pipeline_expression
                            (compound_expression
                              (simple_expression
                                (qualified_identifier
                                  (lowercase_identifier))))))))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (array_access_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))
                    (expression
                      (pipeline_expression
                        (compound_expression
                          (simple_expression
                            (atomic_expression
                              (literal
                                (integer_literal)))))))
                    (colon)
                    (expression
                      (pipeline_expression
                        (compound_expression
                          (simple_expression
                            (atomic_expression
                              (literal
                                (integer_literal)))))))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur before semi (BARBAR)
================================================================================
fn main {
  a ||
  // b
  b
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (binary_expression
                  (compound_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier))))
                  (comment)
                  (compound_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur before semi (BAR)
================================================================================
fn main {
  a |
  // b
  b
  match x {
    A(a) |
    // b
    B(a) => {
    }
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (binary_expression
                  (compound_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier))))
                  (comment)
                  (compound_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (match_expression
              (compound_expression
                (simple_expression
                  (qualified_identifier
                    (lowercase_identifier))))
              (case_clause
                (pattern
                  (or_pattern
                    (pattern
                      (simple_pattern
                        (constructor_pattern
                          (constructor_expression
                            (uppercase_identifier))
                          (constructor_pattern_argument
                            (pattern
                              (simple_pattern
                                (lowercase_identifier)))))))
                    (comment)
                    (pattern
                      (simple_pattern
                        (constructor_pattern
                          (constructor_expression
                            (uppercase_identifier))
                          (constructor_pattern_argument
                            (pattern
                              (simple_pattern
                                (lowercase_identifier)))))))))
                (statement_expression
                  (expression
                    (pipeline_expression
                      (compound_expression
                        (simple_expression
                          (map_expression)))))))
              (semicolon
                (automatic_semicolon)))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur before semi (AS)
================================================================================
fn main {
  a |
  // b
  b
  (is_ as &T)
  match x {
    A(asi) |
    // b
    B(ass) as
    as_ => {
    }
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (binary_expression
                  (compound_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier))))
                  (comment)
                  (compound_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (tuple_expression
                    (expression
                      (pipeline_expression
                        (compound_expression
                          (postfix_expression
                            (as_expression
                              (simple_expression
                                (qualified_identifier
                                  (lowercase_identifier)))
                              (type_name
                                (qualified_type_identifier
                                  (identifier
                                    (uppercase_identifier)))))))))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (match_expression
              (compound_expression
                (simple_expression
                  (qualified_identifier
                    (lowercase_identifier))))
              (case_clause
                (pattern
                  (as_pattern
                    (pattern
                      (or_pattern
                        (pattern
                          (simple_pattern
                            (constructor_pattern
                              (constructor_expression
                                (uppercase_identifier))
                              (constructor_pattern_argument
                                (pattern
                                  (simple_pattern
                                    (lowercase_identifier)))))))
                        (comment)
                        (pattern
                          (simple_pattern
                            (constructor_pattern
                              (constructor_expression
                                (uppercase_identifier))
                              (constructor_pattern_argument
                                (pattern
                                  (simple_pattern
                                    (lowercase_identifier)))))))))
                    (lowercase_identifier)))
                (statement_expression
                  (expression
                    (pipeline_expression
                      (compound_expression
                        (simple_expression
                          (map_expression)))))))
              (semicolon
                (automatic_semicolon)))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur before semi (IS)
================================================================================
fn main {
  is_ is true
  guard is_ is Some(is_) && as_ is Some(as_) else {
    3
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (postfix_expression
                  (is_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))
                    (is_keyword)
                    (simple_pattern
                      (literal
                        (boolean_literal)))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (guard_expression
            (compound_expression
              (binary_expression
                (compound_expression
                  (postfix_expression
                    (is_expression
                      (simple_expression
                        (qualified_identifier
                          (lowercase_identifier)))
                      (is_keyword)
                      (simple_pattern
                        (constructor_pattern
                          (constructor_expression
                            (uppercase_identifier))
                          (constructor_pattern_argument
                            (pattern
                              (simple_pattern
                                (lowercase_identifier)))))))))
                (compound_expression
                  (postfix_expression
                    (is_expression
                      (simple_expression
                        (qualified_identifier
                          (lowercase_identifier)))
                      (is_keyword)
                      (simple_pattern
                        (constructor_pattern
                          (constructor_expression
                            (uppercase_identifier))
                          (constructor_pattern_argument
                            (pattern
                              (simple_pattern
                                (lowercase_identifier)))))))))))
            (guard_else_expression
              (block_expression
                (statement_expression
                  (expression
                    (pipeline_expression
                      (compound_expression
                        (simple_expression
                          (atomic_expression
                            (literal
                              (integer_literal))))))))
                (semicolon
                  (automatic_semicolon))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur before semi (AMPERAMPER)
================================================================================
fn main {
  a &&
  // b
  b
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (binary_expression
                  (compound_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier))))
                  (comment)
                  (compound_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur before semi (DOTDOT)
================================================================================
fn main {
  T::{ .. // b
  // a
  a}
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (struct_expression
                    (type_name
                      (qualified_type_identifier
                        (identifier
                          (uppercase_identifier))))
                    (colon_colon)
                    (comment)
                    (comment)
                    (expression
                      (pipeline_expression
                        (compound_expression
                          (simple_expression
                            (qualified_identifier
                              (lowercase_identifier))))))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur before semi (PUB, PRIV, READONLY)
================================================================================
pub
fn f() -> Unit {
}

priv
struct S {
}

pub(readonly
) enum A {
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (named_lambda_expression
      (visibility)
      (function_identifier
        (lowercase_identifier))
      (parameters)
      (return_type
        (type
          (apply_type
            (qualified_type_identifier
              (identifier
                (uppercase_identifier))))))
      (block_expression)))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (struct_definition
      (visibility)
      (identifier
        (uppercase_identifier))))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (enum_definition
      (visibility
        (pub_attribute))
      (identifier
        (uppercase_identifier)))))

================================================================================
can occur before semi (TRAIT)
================================================================================
trait
T {
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (trait_definition
      (identifier
        (uppercase_identifier)))))

================================================================================
can occur before semi (TRAITALIAS)
================================================================================
traitalias
T = TT
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (trait_alias_definition
      (identifier
        (uppercase_identifier))
      (type
        (apply_type
          (qualified_type_identifier
            (identifier
              (uppercase_identifier))))))))

================================================================================
can occur before semi (DERIVE)
================================================================================
type A Int derive
(Show)

fn main {
  enum E {} derive
  (Show)
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (type_definition
      (identifier
        (uppercase_identifier))
      (type
        (apply_type
          (qualified_type_identifier
            (identifier
              (uppercase_identifier)))))
      (derive_directive
        (derive_keyword)
        (derive_item
          (type_name
            (qualified_type_identifier
              (identifier
                (uppercase_identifier))))))))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (enum_definition
            (identifier
              (uppercase_identifier))
            (derive_directive
              (derive_keyword)
              (derive_item
                (type_name
                  (qualified_type_identifier
                    (identifier
                      (uppercase_identifier))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur before semi (COLONCOLON)
================================================================================
fn main {
  T::
  {
    a
  }
  @a.T::
  Exit
  @a.T::
  new()
}

fn &T::
f() -> Unit {
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (struct_expression
                    (type_name
                      (qualified_type_identifier
                        (identifier
                          (uppercase_identifier))))
                    (colon_colon)
                    (struct_field_expression
                      (labeled_expression_pun
                        (lowercase_identifier)))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (constructor_expression
                    (type_name
                      (qualified_type_identifier
                        (package_identifier)
                        (dot_identifier
                          (dot_uppercase_identifier))))
                    (colon_colon)
                    (uppercase_identifier)))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (apply_expression
                    (simple_expression
                      (method_expression
                        (type_name
                          (qualified_type_identifier
                            (package_identifier)
                            (dot_identifier
                              (dot_uppercase_identifier))))
                        (colon_colon)
                        (lowercase_identifier)))))))))
        (semicolon
          (automatic_semicolon)))))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (named_lambda_expression
      (function_identifier
        (type_name
          (qualified_type_identifier
            (identifier
              (uppercase_identifier))))
        (colon_colon)
        (lowercase_identifier))
      (parameters)
      (return_type
        (type
          (apply_type
            (qualified_type_identifier
              (identifier
                (uppercase_identifier))))))
      (block_expression))))

================================================================================
can occur before semi (TEST)
================================================================================
test
// a
{
}

test
// a
// b
"aa" {
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (test_definition
      (comment)
      (block_expression)))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (test_definition
      (comment)
      (comment)
      (string_literal
        (string_fragment
          (unescaped_string_fragment)))
      (block_expression))))

================================================================================
can occur before semi (LOOP)
================================================================================
fn main {
  loop
  // a
  a, b {
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (loop_expression
              (comment)
              (expression
                (pipeline_expression
                  (compound_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier))))))
              (expression
                (pipeline_expression
                  (compound_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur before semi (FOR)
================================================================================
fn main {
  for
  // a
  a, b in [] {
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (for_in_expression
              (for_keyword)
              (comment)
              (automatic_newline)
              (lowercase_identifier)
              (lowercase_identifier)
              (expression
                (pipeline_expression
                  (compound_expression
                    (simple_expression
                      (array_expression)))))
              (block_expression))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur before semi (AMPER, CARET)
================================================================================
fn main {
  1 &
  2
  3 ^
  4
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (binary_expression
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal)))))
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal))))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (binary_expression
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal)))))
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal))))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur before semi (RAISE)
================================================================================
fn main {
  raise
  Error("a")
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (raise_expression))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (apply_expression
                    (simple_expression
                      (constructor_expression
                        (uppercase_identifier)))
                    (argument
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (string_literal
                                    (string_fragment
                                      (unescaped_string_fragment))))))))))))))))
        (semicolon
          (automatic_semicolon))))))
