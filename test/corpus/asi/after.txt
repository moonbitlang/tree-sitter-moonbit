================================================================================
can occur after semi (DOT_UIDENT, DOT_LIDENT, DOT_INT)
================================================================================
fn main {
  a
  .a
  .3
  .f()
  ..f()
  @a
  .T
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (dot_dot_apply_expression
                    (simple_expression
                      (dot_apply_expression
                        (simple_expression
                          (access_expression
                            (simple_expression
                              (access_expression
                                (simple_expression
                                  (qualified_identifier
                                    (lowercase_identifier)))
                                (accessor
                                  (dot_identifier
                                    (dot_lowercase_identifier)))))
                            (accessor
                              (dot))))
                        (dot_identifier
                          (dot_lowercase_identifier))))
                    (dot_dot_identifier
                      (dot_dot))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (constructor_expression
                    (package_identifier)
                    (dot_uppercase_identifier)))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur after semi (COLONCOLON)
================================================================================
fn main {
  T
  ::new()
  T
  ::{
    a
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (apply_expression
                    (simple_expression
                      (method_expression
                        (type_name
                          (qualified_type_identifier
                            (identifier
                              (uppercase_identifier))))
                        (colon_colon)
                        (lowercase_identifier)))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (struct_expression
                    (type_name
                      (qualified_type_identifier
                        (identifier
                          (uppercase_identifier))))
                    (colon_colon)
                    (struct_field_expression
                      (labeled_expression_pun
                        (lowercase_identifier)))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur after semi (FAT_ARROW)
================================================================================
fn main {
  match a {
    1
    => {
    }
    _
    // default
    => {
    }
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (match_expression
              (compound_expression
                (simple_expression
                  (qualified_identifier
                    (lowercase_identifier))))
              (case_clause
                (pattern
                  (simple_pattern
                    (literal
                      (integer_literal))))
                (statement_expression
                  (expression
                    (pipeline_expression
                      (compound_expression
                        (simple_expression
                          (map_expression)))))))
              (semicolon
                (automatic_semicolon))
              (case_clause
                (pattern
                  (simple_pattern))
                (comment)
                (statement_expression
                  (expression
                    (pipeline_expression
                      (compound_expression
                        (simple_expression
                          (map_expression)))))))
              (semicolon
                (automatic_semicolon)))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur after semi (THIN_ARROW)
================================================================================
fn f()
// a
-> Unit {
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (named_lambda_expression
      (function_identifier
        (lowercase_identifier))
      (parameters)
      (comment)
      (return_type
        (type
          (apply_type
            (qualified_type_identifier
              (identifier
                (uppercase_identifier))))))
      (block_expression))))

================================================================================
can occur after semi (IN)
================================================================================
fn main {
  for x, y
  in a {
  }
  for
  x, y
  in a {
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (for_in_expression
              (for_keyword)
              (lowercase_identifier)
              (lowercase_identifier)
              (expression
                (pipeline_expression
                  (compound_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier))))))
              (block_expression))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (for_in_expression
              (for_keyword)
              (automatic_newline)
              (lowercase_identifier)
              (lowercase_identifier)
              (expression
                (pipeline_expression
                  (compound_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier))))))
              (block_expression))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur after semi (PIPE)
================================================================================
fn main {
  a
  // a
  |> y
  // e
  #| c
  // d
  #| c
  |> println
  // f
  // k
  |> g()
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (binary_expression
                  (compound_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier))))
                  (comment)
                  (pipe_operator)
                  (compound_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))))))))
        (comment)
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (binary_expression
                  (compound_expression
                    (binary_expression
                      (compound_expression
                        (simple_expression
                          (atomic_expression
                            (literal
                              (multiline_string_literal
                                (multiline_string_fragment
                                  (multiline_string_separator)
                                  (multiline_string_content))
                                (comment)
                                (automatic_newline)
                                (multiline_string_fragment
                                  (multiline_string_separator)
                                  (multiline_string_content)))))))
                      (automatic_newline)
                      (pipe_operator)
                      (compound_expression
                        (simple_expression
                          (qualified_identifier
                            (lowercase_identifier))))))
                  (comment)
                  (comment)
                  (pipe_operator)
                  (compound_expression
                    (simple_expression
                      (apply_expression
                        (simple_expression
                          (qualified_identifier
                            (lowercase_identifier)))))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur after semi (EQUAL)
================================================================================
typealias T
  = Int
traitalias D
  = Default
extern "c" fn x()
  = "a"
fn main {
  let x
  = 3
  let mut x
  = 3
  guard let 1 | 2
  = 4
  f(a
  =4)
  x
  = 6
  for x
  = 1; x < 10; x = x + 1 {
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (type_alias_definition
      (identifier
        (uppercase_identifier))
      (type
        (apply_type
          (qualified_type_identifier
            (identifier
              (uppercase_identifier)))))))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (trait_alias_definition
      (identifier
        (uppercase_identifier))
      (type
        (apply_type
          (qualified_type_identifier
            (identifier
              (uppercase_identifier)))))))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (named_lambda_expression
      (external_linkage
        (string_literal
          (string_fragment
            (unescaped_string_fragment))))
      (function_identifier
        (lowercase_identifier))
      (parameters)
      (external_source
        (string_literal
          (string_fragment
            (unescaped_string_fragment))))))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (atomic_expression
                      (literal
                        (integer_literal)))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (let_mut_expression
            (lowercase_identifier)
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (atomic_expression
                      (literal
                        (integer_literal)))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (guard_let_expression
            (pattern
              (or_pattern
                (pattern
                  (simple_pattern
                    (literal
                      (integer_literal))))
                (pattern
                  (simple_pattern
                    (literal
                      (integer_literal))))))
            (simple_expression
              (atomic_expression
                (literal
                  (integer_literal))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (apply_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))
                    (argument
                      (argument_label
                        (simple_expression
                          (qualified_identifier
                            (lowercase_identifier))))
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (integer_literal))))))))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (assign_expression
            (left_value
              (qualified_identifier
                (lowercase_identifier)))
            (assign_operator
              (equal))
            (expression
              (for_expression
                (for_keyword)
                (for_binder
                  (lowercase_identifier)
                  (expression
                    (pipeline_expression
                      (compound_expression
                        (simple_expression
                          (atomic_expression
                            (literal
                              (integer_literal))))))))
                (semicolon)
                (compound_expression
                  (binary_expression
                    (compound_expression
                      (simple_expression
                        (qualified_identifier
                          (lowercase_identifier))))
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal)))))))
                (semicolon)
                (for_binder
                  (lowercase_identifier)
                  (expression
                    (pipeline_expression
                      (compound_expression
                        (binary_expression
                          (compound_expression
                            (simple_expression
                              (qualified_identifier
                                (lowercase_identifier))))
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (integer_literal))))))))))
                (block_expression)))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur after semi (AUGMENTED_ASSIGNMENT)
================================================================================
fn main {
  x
  += y
  x
  -= y
  x
  *= y
  x
  /= y
  x
  %= y
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (assign_expression
            (left_value
              (qualified_identifier
                (lowercase_identifier)))
            (assign_operator
              (plus_equal))
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (qualified_identifier
                      (lowercase_identifier))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (assign_expression
            (left_value
              (qualified_identifier
                (lowercase_identifier)))
            (assign_operator
              (minus_equal))
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (qualified_identifier
                      (lowercase_identifier))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (assign_expression
            (left_value
              (qualified_identifier
                (lowercase_identifier)))
            (assign_operator
              (asterisk_equal))
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (qualified_identifier
                      (lowercase_identifier))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (assign_expression
            (left_value
              (qualified_identifier
                (lowercase_identifier)))
            (assign_operator
              (slash_equal))
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (qualified_identifier
                      (lowercase_identifier))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (assign_expression
            (left_value
              (qualified_identifier
                (lowercase_identifier)))
            (assign_operator
              (percent_equal))
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (qualified_identifier
                      (lowercase_identifier))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur after semi (ELSE)
================================================================================
fn main {
  if true {
  }
  else {
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (if_expression
              (compound_expression
                (simple_expression
                  (atomic_expression
                    (literal
                      (boolean_literal)))))
              (block_expression)
              (else_clause
                (block_expression)))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur after semi (CATCH)
================================================================================
fn main {
  try f()
  catch {
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (try_expression
              (expression
                (pipeline_expression
                  (compound_expression
                    (simple_expression
                      (apply_expression
                        (simple_expression
                          (qualified_identifier
                            (lowercase_identifier)))))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur after semi (COMMA)
================================================================================
fn main {
  loop 1, 2 {
    _, _ => continue 1
    // a
    // b
    , 2
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (loop_expression
              (expression
                (pipeline_expression
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal)))))))
              (expression
                (pipeline_expression
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal)))))))
              (matrix_case_clause
                (pattern
                  (simple_pattern))
                (pattern
                  (simple_pattern))
                (statement_expression
                  (continue_expression
                    (expression
                      (pipeline_expression
                        (compound_expression
                          (simple_expression
                            (atomic_expression
                              (literal
                                (integer_literal)))))))
                    (comment)
                    (comment)
                    (expression
                      (pipeline_expression
                        (compound_expression
                          (simple_expression
                            (atomic_expression
                              (literal
                                (integer_literal))))))))))
              (semicolon
                (automatic_semicolon)))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur after semi (COLON)
================================================================================
fn f(a
: Int) -> Unit {
}

fn main {
  a[1
  :2]
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (named_lambda_expression
      (function_identifier
        (lowercase_identifier))
      (parameters
        (parameter
          (lowercase_identifier)
          (type_annotation
            (colon)
            (type
              (apply_type
                (qualified_type_identifier
                  (identifier
                    (uppercase_identifier))))))))
      (return_type
        (type
          (apply_type
            (qualified_type_identifier
              (identifier
                (uppercase_identifier))))))
      (block_expression)))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (array_access_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))
                    (expression
                      (pipeline_expression
                        (compound_expression
                          (simple_expression
                            (atomic_expression
                              (literal
                                (integer_literal)))))))
                    (colon)
                    (expression
                      (pipeline_expression
                        (compound_expression
                          (simple_expression
                            (atomic_expression
                              (literal
                                (integer_literal)))))))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur after semi (BAR)
================================================================================
fn main {
  1
  | 2
  match a {
    1
    | 2 => ()
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (binary_expression
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal)))))
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal))))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (match_expression
              (compound_expression
                (simple_expression
                  (qualified_identifier
                    (lowercase_identifier))))
              (case_clause
                (pattern
                  (or_pattern
                    (pattern
                      (simple_pattern
                        (literal
                          (integer_literal))))
                    (pattern
                      (simple_pattern
                        (literal
                          (integer_literal))))))
                (statement_expression
                  (expression
                    (pipeline_expression
                      (compound_expression
                        (simple_expression
                          (unit_expression)))))))
              (semicolon
                (automatic_semicolon)))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur after semi (AS, IS)
================================================================================
fn main {
  as_
  as &T
  is_
  is Some(_)
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (postfix_expression
                  (as_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))
                    (type_name
                      (qualified_type_identifier
                        (identifier
                          (uppercase_identifier))))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (postfix_expression
                  (is_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))
                    (is_keyword)
                    (simple_pattern
                      (constructor_pattern
                        (constructor_expression
                          (uppercase_identifier))
                        (constructor_pattern_argument
                          (pattern
                            (simple_pattern)))))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur after semi (DOTDOT)
================================================================================
fn main {
  a
  ..f()
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (dot_dot_apply_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))
                    (dot_dot_identifier
                      (dot_dot))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur after semi (DERIVE)
================================================================================
enum A {
} // a
derive(Show)

fn main {
  enum A {
  } // a
  derive(Show)
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (enum_definition
      (identifier
        (uppercase_identifier))
      (comment)
      (derive_directive
        (derive_keyword)
        (derive_item
          (type_name
            (qualified_type_identifier
              (identifier
                (uppercase_identifier))))))))
  (semicolon
    (automatic_semicolon))
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (enum_definition
            (identifier
              (uppercase_identifier))
            (comment)
            (derive_directive
              (derive_keyword)
              (derive_item
                (type_name
                  (qualified_type_identifier
                    (identifier
                      (uppercase_identifier))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur after semi (WITH)
================================================================================
impl A for T
// a
with f() -> Unit {
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (impl_definition
      (type_name
        (qualified_type_identifier
          (identifier
            (uppercase_identifier))))
      (for_keyword)
      (type
        (apply_type
          (qualified_type_identifier
            (identifier
              (uppercase_identifier)))))
      (comment)
      (function_identifier
        (lowercase_identifier))
      (parameters)
      (return_type
        (type
          (apply_type
            (qualified_type_identifier
              (identifier
                (uppercase_identifier))))))
      (block_expression))))

================================================================================
can occur after semi (QUESTION)
================================================================================
fn main {
  f
?(2, 1)
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (apply_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))
                    (apply_operator
                      (question_operator))
                    (argument
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (integer_literal))))))))
                    (argument
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (integer_literal))))))))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur after semi (RANGE_INCLUSIVE, RANGE_EXCLUSIVE)
================================================================================
fn main {
  match a {
  1
  ..<_ => ()
  2
  ..=_ => ()
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (match_expression
              (compound_expression
                (simple_expression
                  (qualified_identifier
                    (lowercase_identifier))))
              (case_clause
                (pattern
                  (range_pattern
                    (simple_pattern
                      (literal
                        (integer_literal)))
                    (dot_dot_lt)
                    (simple_pattern)))
                (statement_expression
                  (expression
                    (pipeline_expression
                      (compound_expression
                        (simple_expression
                          (unit_expression)))))))
              (semicolon
                (automatic_semicolon))
              (case_clause
                (pattern
                  (range_pattern
                    (simple_pattern
                      (literal
                        (integer_literal)))
                    (dot_dot_eq)
                    (simple_pattern)))
                (statement_expression
                  (expression
                    (pipeline_expression
                      (compound_expression
                        (simple_expression
                          (unit_expression)))))))
              (semicolon
                (automatic_semicolon)))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
can occur after semi (EXCLAMATION)
================================================================================
fn main {
  f
  !(1)
  g
  !!(2)
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (apply_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))
                    (apply_operator)
                    (argument
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (integer_literal))))))))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (apply_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))
                    (apply_operator)
                    (argument
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (integer_literal))))))))))))))
        (semicolon
          (automatic_semicolon))))))
