================================================================================
question
================================================================================
fn f() -> Result[Unit, String] {
  let x = f
?(1, 2)
  Ok(x)
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (parameters)
      (return_type
        (type
          (apply_type
            (qualified_type_identifier
              (identifier
                (uppercase_identifier)))
            (type_arguments
              (type
                (apply_type
                  (qualified_type_identifier
                    (identifier
                      (uppercase_identifier)))))
              (type
                (apply_type
                  (qualified_type_identifier
                    (identifier
                      (uppercase_identifier)))))))))
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (compound_expression
                (simple_expression
                  (apply_expression
                    (lowercase_identifier)
                    (arguments
                      (argument
                        (expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (integer_literal)))))))
                      (argument
                        (expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (integer_literal))))))))))))))
        (statement_expression
          (expression
            (compound_expression
              (simple_expression
                (apply_expression
                  (simple_expression
                    (constructor_expression
                      (uppercase_identifier)))
                  (arguments
                    (argument
                      (expression
                        (compound_expression
                          (simple_expression
                            (qualified_identifier
                              (lowercase_identifier))))))))))))))))

================================================================================
comma
================================================================================
fn main {
  loop a {
    _ => {
      continue 1,
        2   ,
3
    }
  }
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (expression
            (loop_expression
              (expression
                (compound_expression
                  (simple_expression
                    (qualified_identifier
                      (lowercase_identifier)))))
              (matrix_case_clause
                (pattern
                  (simple_pattern))
                (statement_expression
                  (expression
                    (compound_expression
                      (simple_expression
                        (nonempty_block_expression
                          (statement_expression
                            (continue_expression
                              (expression
                                (compound_expression
                                  (simple_expression
                                    (atomic_expression
                                      (literal
                                        (integer_literal))))))
                              (expression
                                (compound_expression
                                  (simple_expression
                                    (atomic_expression
                                      (literal
                                        (integer_literal))))))
                              (expression
                                (compound_expression
                                  (simple_expression
                                    (atomic_expression
                                      (literal
                                        (integer_literal)))))))))))))))))))))
