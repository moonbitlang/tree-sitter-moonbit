================================================================================
pipe operator
================================================================================
fn init() { 1 * 5 |> f(5) |> g  }
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (parameters)
      (block_expression
        (statement_expression
          (expression
            (compound_expression
              (binary_expression
                (compound_expression
                  (binary_expression
                    (compound_expression
                      (binary_expression
                        (compound_expression
                          (simple_expression
                            (atomic_expression
                              (literal
                                (integer_literal)))))
                        (compound_expression
                          (simple_expression
                            (atomic_expression
                              (literal
                                (integer_literal)))))))
                    (compound_expression
                      (simple_expression
                        (apply_expression
                          (simple_expression
                            (qualified_identifier
                              (lowercase_identifier)))
                          (arguments
                            (argument
                              (expression
                                (compound_expression
                                  (simple_expression
                                    (atomic_expression
                                      (literal
                                        (integer_literal)))))))))))))
                (compound_expression
                  (simple_expression
                    (qualified_identifier
                      (lowercase_identifier))))))))))))

================================================================================
match expression
================================================================================
fn init {
  match x {
    A => return
    B => return 1
    C => i = i + 1
    D => break
    E => continue
    F => while true {}
  }
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (expression
            (match_expression
              (compound_expression
                (simple_expression
                  (qualified_identifier
                    (lowercase_identifier))))
              (case_clause
                (pattern
                  (simple_pattern
                    (constructor_pattern
                      (constructor_expression
                        (uppercase_identifier)))))
                (statement_expression
                  (return_expression)))
              (case_clause
                (pattern
                  (simple_pattern
                    (constructor_pattern
                      (constructor_expression
                        (uppercase_identifier)))))
                (statement_expression
                  (return_expression
                    (expression
                      (compound_expression
                        (simple_expression
                          (atomic_expression
                            (literal
                              (integer_literal)))))))))
              (case_clause
                (pattern
                  (simple_pattern
                    (constructor_pattern
                      (constructor_expression
                        (uppercase_identifier)))))
                (statement_expression
                  (assign_expression
                    (left_value
                      (qualified_identifier
                        (lowercase_identifier)))
                    (assign_operator)
                    (expression
                      (compound_expression
                        (binary_expression
                          (compound_expression
                            (simple_expression
                              (qualified_identifier
                                (lowercase_identifier))))
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (integer_literal)))))))))))
              (case_clause
                (pattern
                  (simple_pattern
                    (constructor_pattern
                      (constructor_expression
                        (uppercase_identifier)))))
                (statement_expression
                  (break_expression)))
              (case_clause
                (pattern
                  (simple_pattern
                    (constructor_pattern
                      (constructor_expression
                        (uppercase_identifier)))))
                (statement_expression
                  (continue_expression)))
              (case_clause
                (pattern
                  (simple_pattern
                    (constructor_pattern
                      (constructor_expression
                        (uppercase_identifier)))))
                (statement_expression
                  (expression
                    (while_expression
                      (compound_expression
                        (simple_expression
                          (atomic_expression
                            (literal
                              (boolean_literal)))))
                      (block_expression))))))))))))

================================================================================
struct construction
================================================================================
fn init() { let a = A::{ ..id, name: "John Doe" } }
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (parameters)
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (compound_expression
                (simple_expression
                  (struct_expression
                    (type_name
                      (qualified_type_identifier
                        (identifier
                          (uppercase_identifier))))
                    (expression
                      (compound_expression
                        (simple_expression
                          (qualified_identifier
                            (lowercase_identifier)))))
                    (struct_field_expression
                      (labeled_expression
                        (lowercase_identifier)
                        (expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (string_literal
                                    (string_fragment
                                      (unescaped_string_fragment))))))))))))))))))))

================================================================================
map expression
================================================================================
fn main {
  let a = { "a" : 1, "b" : 2, 3 : "c" }
  let b = {}
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (compound_expression
                (simple_expression
                  (map_expression
                    (map_element_expression
                      (map_element_key
                        (literal
                          (string_literal
                            (string_fragment
                              (unescaped_string_fragment)))))
                      (expression
                        (compound_expression
                          (simple_expression
                            (atomic_expression
                              (literal
                                (integer_literal)))))))
                    (map_element_expression
                      (map_element_key
                        (literal
                          (string_literal
                            (string_fragment
                              (unescaped_string_fragment)))))
                      (expression
                        (compound_expression
                          (simple_expression
                            (atomic_expression
                              (literal
                                (integer_literal)))))))
                    (map_element_expression
                      (map_element_key
                        (literal
                          (integer_literal)))
                      (expression
                        (compound_expression
                          (simple_expression
                            (atomic_expression
                              (literal
                                (string_literal
                                  (string_fragment
                                    (unescaped_string_fragment)))))))))))))))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (compound_expression
                (simple_expression
                  (map_expression))))))))))

================================================================================
binary expression
================================================================================
fn main {
  let a = 1 == 2
  let b = 3 != 4
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (compound_expression
                (binary_expression
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal)))))
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal))))))))))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (compound_expression
                (binary_expression
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal)))))
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal))))))))))))))

================================================================================
assign expression
================================================================================
fn main {
  a += 3
  b += 4
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (assign_expression
            (left_value
              (qualified_identifier
                (lowercase_identifier)))
            (assign_operator)
            (expression
              (compound_expression
                (simple_expression
                  (atomic_expression
                    (literal
                      (integer_literal))))))))
        (statement_expression
          (assign_expression
            (left_value
              (qualified_identifier
                (lowercase_identifier)))
            (assign_operator)
            (expression
              (compound_expression
                (simple_expression
                  (atomic_expression
                    (literal
                      (integer_literal))))))))))))

================================================================================
array access expression
================================================================================
fn main {
  let a = b[1:]
  let b = c[:]
  let d = c[:1]
  let e = c[1:3]
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (compound_expression
                (simple_expression
                  (array_access_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))
                    (expression
                      (compound_expression
                        (simple_expression
                          (atomic_expression
                            (literal
                              (integer_literal))))))))))))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (compound_expression
                (simple_expression
                  (array_access_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))))))))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (compound_expression
                (simple_expression
                  (array_access_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))
                    (expression
                      (compound_expression
                        (simple_expression
                          (atomic_expression
                            (literal
                              (integer_literal))))))))))))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (compound_expression
                (simple_expression
                  (array_access_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))
                    (expression
                      (compound_expression
                        (simple_expression
                          (atomic_expression
                            (literal
                              (integer_literal))))))
                    (expression
                      (compound_expression
                        (simple_expression
                          (atomic_expression
                            (literal
                              (integer_literal))))))))))))))))

================================================================================
boolean expression
================================================================================
fn main {
  let a = 1 | 2 && 3 & 4 || 5
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (compound_expression
                (binary_expression
                  (compound_expression
                    (binary_expression
                      (compound_expression
                        (binary_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (integer_literal)))))
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (integer_literal)))))))
                      (compound_expression
                        (binary_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (integer_literal)))))
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (integer_literal)))))))))
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal))))))))))))))

================================================================================
shift expression
================================================================================
fn main {
  let a = 1 >> 2 | 2 << 3 && 3 >> 4 & 4 << 5 || 5 >> 6
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (compound_expression
                (binary_expression
                  (compound_expression
                    (binary_expression
                      (compound_expression
                        (binary_expression
                          (compound_expression
                            (binary_expression
                              (compound_expression
                                (simple_expression
                                  (atomic_expression
                                    (literal
                                      (integer_literal)))))
                              (compound_expression
                                (simple_expression
                                  (atomic_expression
                                    (literal
                                      (integer_literal)))))))
                          (compound_expression
                            (binary_expression
                              (compound_expression
                                (simple_expression
                                  (atomic_expression
                                    (literal
                                      (integer_literal)))))
                              (compound_expression
                                (simple_expression
                                  (atomic_expression
                                    (literal
                                      (integer_literal)))))))))
                      (compound_expression
                        (binary_expression
                          (compound_expression
                            (binary_expression
                              (compound_expression
                                (simple_expression
                                  (atomic_expression
                                    (literal
                                      (integer_literal)))))
                              (compound_expression
                                (simple_expression
                                  (atomic_expression
                                    (literal
                                      (integer_literal)))))))
                          (compound_expression
                            (binary_expression
                              (compound_expression
                                (simple_expression
                                  (atomic_expression
                                    (literal
                                      (integer_literal)))))
                              (compound_expression
                                (simple_expression
                                  (atomic_expression
                                    (literal
                                      (integer_literal)))))))))))
                  (compound_expression
                    (binary_expression
                      (compound_expression
                        (simple_expression
                          (atomic_expression
                            (literal
                              (integer_literal)))))
                      (compound_expression
                        (simple_expression
                          (atomic_expression
                            (literal
                              (integer_literal))))))))))))))))

================================================================================
xor expression
================================================================================
fn main {
  let a = 1 ^ 2 | 2 ^ 3 && 3 ^ 4 & 4 ^ 5 || 5 ^ 6 >> 7 ^ 8 << 8 ^ 9
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (compound_expression
                (binary_expression
                  (compound_expression
                    (binary_expression
                      (compound_expression
                        (binary_expression
                          (compound_expression
                            (binary_expression
                              (compound_expression
                                (simple_expression
                                  (atomic_expression
                                    (literal
                                      (integer_literal)))))
                              (compound_expression
                                (simple_expression
                                  (atomic_expression
                                    (literal
                                      (integer_literal)))))))
                          (compound_expression
                            (binary_expression
                              (compound_expression
                                (simple_expression
                                  (atomic_expression
                                    (literal
                                      (integer_literal)))))
                              (compound_expression
                                (simple_expression
                                  (atomic_expression
                                    (literal
                                      (integer_literal)))))))))
                      (compound_expression
                        (binary_expression
                          (compound_expression
                            (binary_expression
                              (compound_expression
                                (simple_expression
                                  (atomic_expression
                                    (literal
                                      (integer_literal)))))
                              (compound_expression
                                (binary_expression
                                  (compound_expression
                                    (simple_expression
                                      (atomic_expression
                                        (literal
                                          (integer_literal)))))
                                  (compound_expression
                                    (simple_expression
                                      (atomic_expression
                                        (literal
                                          (integer_literal)))))))))
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (integer_literal)))))))))
                  (compound_expression
                    (binary_expression
                      (compound_expression
                        (binary_expression
                          (compound_expression
                            (binary_expression
                              (compound_expression
                                (simple_expression
                                  (atomic_expression
                                    (literal
                                      (integer_literal)))))
                              (compound_expression
                                (binary_expression
                                  (compound_expression
                                    (simple_expression
                                      (atomic_expression
                                        (literal
                                          (integer_literal)))))
                                  (compound_expression
                                    (simple_expression
                                      (atomic_expression
                                        (literal
                                          (integer_literal)))))))))
                          (compound_expression
                            (binary_expression
                              (compound_expression
                                (simple_expression
                                  (atomic_expression
                                    (literal
                                      (integer_literal)))))
                              (compound_expression
                                (simple_expression
                                  (atomic_expression
                                    (literal
                                      (integer_literal)))))))))
                      (compound_expression
                        (simple_expression
                          (atomic_expression
                            (literal
                              (integer_literal))))))))))))))))

================================================================================
as expression
================================================================================
fn main {
  (a as &Logger).write_string("Hello")
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (expression
            (compound_expression
              (simple_expression
                (dot_apply_expression
                  (simple_expression
                    (tuple_expression
                      (expression
                        (compound_expression
                          (postfix_expression
                            (as_expression
                              (simple_expression
                                (qualified_identifier
                                  (lowercase_identifier)))
                              (type_name
                                (qualified_type_identifier
                                  (identifier
                                    (uppercase_identifier))))))))))
                  (dot_identifier
                    (dot_lowercase_identifier))
                  (argument
                    (expression
                      (compound_expression
                        (simple_expression
                          (atomic_expression
                            (literal
                              (string_literal
                                (string_fragment
                                  (unescaped_string_fragment))))))))))))))))))

================================================================================
is expression
================================================================================
fn main {
  a is None
  b is Some(3)
  c is '\b'..='\r'
  d is '\u0600'..='\u0666'
  guard e
  guard f is None
  guard g is Some(3)
  guard h is '\b'..='\r' else {
    4
  }
  i
  is ('\u0600'..='\u0666' | '\u0667'..='\u0668')
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (expression
            (compound_expression
              (postfix_expression
                (is_expression
                  (simple_expression
                    (qualified_identifier
                      (lowercase_identifier)))
                  (simple_pattern
                    (constructor_pattern
                      (constructor_expression
                        (uppercase_identifier)))))))))
        (statement_expression
          (expression
            (compound_expression
              (postfix_expression
                (is_expression
                  (simple_expression
                    (qualified_identifier
                      (lowercase_identifier)))
                  (simple_pattern
                    (constructor_pattern
                      (constructor_expression
                        (uppercase_identifier))
                      (constructor_pattern_argument
                        (pattern
                          (simple_pattern
                            (literal
                              (integer_literal))))))))))))
        (statement_expression
          (expression
            (compound_expression
              (postfix_expression
                (is_expression
                  (simple_expression
                    (qualified_identifier
                      (lowercase_identifier)))
                  (range_pattern
                    (simple_pattern
                      (literal
                        (char_literal
                          (escape_sequence))))
                    (simple_pattern
                      (literal
                        (char_literal
                          (escape_sequence))))))))))
        (statement_expression
          (expression
            (compound_expression
              (postfix_expression
                (is_expression
                  (simple_expression
                    (qualified_identifier
                      (lowercase_identifier)))
                  (range_pattern
                    (simple_pattern
                      (literal
                        (char_literal
                          (escape_sequence))))
                    (simple_pattern
                      (literal
                        (char_literal
                          (escape_sequence))))))))))
        (statement_expression
          (guard_expression
            (compound_expression
              (simple_expression
                (qualified_identifier
                  (lowercase_identifier))))))
        (statement_expression
          (guard_expression
            (compound_expression
              (postfix_expression
                (is_expression
                  (simple_expression
                    (qualified_identifier
                      (lowercase_identifier)))
                  (simple_pattern
                    (constructor_pattern
                      (constructor_expression
                        (uppercase_identifier)))))))))
        (statement_expression
          (guard_expression
            (compound_expression
              (postfix_expression
                (is_expression
                  (simple_expression
                    (qualified_identifier
                      (lowercase_identifier)))
                  (simple_pattern
                    (constructor_pattern
                      (constructor_expression
                        (uppercase_identifier))
                      (constructor_pattern_argument
                        (pattern
                          (simple_pattern
                            (literal
                              (integer_literal))))))))))))
        (statement_expression
          (guard_expression
            (compound_expression
              (postfix_expression
                (is_expression
                  (simple_expression
                    (qualified_identifier
                      (lowercase_identifier)))
                  (range_pattern
                    (simple_pattern
                      (literal
                        (char_literal
                          (escape_sequence))))
                    (simple_pattern
                      (literal
                        (char_literal
                          (escape_sequence))))))))
            (guard_else_expression
              (block_expression
                (statement_expression
                  (expression
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal)))))))))))
        (statement_expression
          (expression
            (compound_expression
              (postfix_expression
                (is_expression
                  (simple_expression
                    (qualified_identifier
                      (lowercase_identifier)))
                  (simple_pattern
                    (pattern
                      (or_pattern
                        (pattern
                          (range_pattern
                            (simple_pattern
                              (literal
                                (char_literal
                                  (escape_sequence))))
                            (simple_pattern
                              (literal
                                (char_literal
                                  (escape_sequence))))))
                        (pattern
                          (range_pattern
                            (simple_pattern
                              (literal
                                (char_literal
                                  (escape_sequence))))
                            (simple_pattern
                              (literal
                                (char_literal
                                  (escape_sequence))))))))))))))))))

================================================================================
unfinished
================================================================================
fn main {
  println("a")
  ...
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (expression
            (compound_expression
              (simple_expression
                (apply_expression
                  (simple_expression
                    (qualified_identifier
                      (lowercase_identifier)))
                  (arguments
                    (argument
                      (expression
                        (compound_expression
                          (simple_expression
                            (atomic_expression
                              (literal
                                (string_literal
                                  (string_fragment
                                    (unescaped_string_fragment)))))))))))))))
        (statement_expression
          (unfinished))))))
