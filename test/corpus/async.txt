================================================================================
async function
================================================================================
async fn[T, E : Error] suspend(
  f : ((T) -> Unit, (E) -> Unit) -> Unit
) -> T!E = "%async.suspend"

fn run(f : async () -> Unit) -> Unit = "%async.run"
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (type_parameters
        (type_identifier
          (identifier
            (uppercase_identifier)))
        (type_identifier
          (identifier
            (uppercase_identifier))
          (constraints
            (constraint
              (qualified_type_identifier
                (identifier
                  (uppercase_identifier)))))))
      (function_identifier
        (lowercase_identifier))
      (parameters
        (parameter
          (positional_parameter
            (lowercase_identifier)
            (type_annotation
              (type
                (function_type
                  (type
                    (function_type
                      (type
                        (apply_type
                          (qualified_type_identifier
                            (identifier
                              (uppercase_identifier)))))
                      (return_type
                        (type
                          (apply_type
                            (qualified_type_identifier
                              (identifier
                                (uppercase_identifier))))))))
                  (type
                    (function_type
                      (type
                        (apply_type
                          (qualified_type_identifier
                            (identifier
                              (uppercase_identifier)))))
                      (return_type
                        (type
                          (apply_type
                            (qualified_type_identifier
                              (identifier
                                (uppercase_identifier))))))))
                  (return_type
                    (type
                      (apply_type
                        (qualified_type_identifier
                          (identifier
                            (uppercase_identifier))))))))))))
      (return_type
        (type_with_error
          (type
            (apply_type
              (qualified_type_identifier
                (identifier
                  (uppercase_identifier)))))
          (type
            (apply_type
              (qualified_type_identifier
                (identifier
                  (uppercase_identifier)))))))
      (external_source
        (string_literal
          (string_fragment
            (unescaped_string_fragment))))))
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (parameters
        (parameter
          (positional_parameter
            (lowercase_identifier)
            (type_annotation
              (type
                (function_type
                  (return_type
                    (type
                      (apply_type
                        (qualified_type_identifier
                          (identifier
                            (uppercase_identifier))))))))))))
      (return_type
        (type
          (apply_type
            (qualified_type_identifier
              (identifier
                (uppercase_identifier))))))
      (external_source
        (string_literal
          (string_fragment
            (unescaped_string_fragment)))))))

================================================================================
apply async
================================================================================
fn main {
  run(fn() {
    suspend!!(fn(k, e) {})
  })
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (expression
            (compound_expression
              (simple_expression
                (apply_expression
                  (simple_expression
                    (qualified_identifier
                      (lowercase_identifier)))
                  (arguments
                    (argument
                      (expression
                        (compound_expression
                          (simple_expression
                            (anonymous_lambda_expression
                              (parameters)
                              (block_expression
                                (statement_expression
                                  (expression
                                    (compound_expression
                                      (simple_expression
                                        (apply_expression
                                          (simple_expression
                                            (qualified_identifier
                                              (lowercase_identifier)))
                                          (apply_operator)
                                          (arguments
                                            (argument
                                              (expression
                                                (compound_expression
                                                  (simple_expression
                                                    (anonymous_lambda_expression
                                                      (parameters
                                                        (parameter
                                                          (positional_parameter
                                                            (lowercase_identifier)))
                                                        (parameter
                                                          (positional_parameter
                                                            (lowercase_identifier))))
                                                      (block_expression))))))))))))))))))))))))))))

================================================================================
async closure
================================================================================
fn main {
  run(async fn() {
    suspend!!(fn(k, e) {})
  })
  let b = async fn!() {
  }
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (expression
            (compound_expression
              (simple_expression
                (apply_expression
                  (simple_expression
                    (qualified_identifier
                      (lowercase_identifier)))
                  (arguments
                    (argument
                      (expression
                        (compound_expression
                          (simple_expression
                            (anonymous_lambda_expression
                              (parameters)
                              (block_expression
                                (statement_expression
                                  (expression
                                    (compound_expression
                                      (simple_expression
                                        (apply_expression
                                          (simple_expression
                                            (qualified_identifier
                                              (lowercase_identifier)))
                                          (apply_operator)
                                          (arguments
                                            (argument
                                              (expression
                                                (compound_expression
                                                  (simple_expression
                                                    (anonymous_lambda_expression
                                                      (parameters
                                                        (parameter
                                                          (positional_parameter
                                                            (lowercase_identifier)))
                                                        (parameter
                                                          (positional_parameter
                                                            (lowercase_identifier))))
                                                      (block_expression))))))))))))))))))))))))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (compound_expression
                (simple_expression
                  (anonymous_lambda_expression
                    (parameters)
                    (block_expression)))))))))))
