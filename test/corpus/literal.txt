================================================================================
escaping chars
================================================================================
fn init {
  println('\b')
  println('\r')
  println('\n')
  println('\t')
  println('\'')
  println('\x78')
  println("\o377")
  println("\u{20BB7}")
  println("\u6211")
  println("\u6221å¥½\n")
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (apply_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))
                    (argument
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (char_literal
                                    (escape_sequence)))))))))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (apply_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))
                    (argument
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (char_literal
                                    (escape_sequence)))))))))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (apply_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))
                    (argument
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (char_literal
                                    (escape_sequence)))))))))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (apply_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))
                    (argument
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (char_literal
                                    (escape_sequence)))))))))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (apply_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))
                    (argument
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (char_literal
                                    (escape_sequence)))))))))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (apply_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))
                    (argument
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (char_literal
                                    (escape_sequence)))))))))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (apply_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))
                    (argument
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (string_literal
                                    (string_fragment
                                      (unescaped_string_fragment))
                                    (string_fragment
                                      (unescaped_string_fragment))))))))))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (apply_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))
                    (argument
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (string_literal
                                    (string_fragment
                                      (unescaped_string_fragment))
                                    (string_fragment
                                      (unescaped_string_fragment))))))))))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (apply_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))
                    (argument
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (string_literal
                                    (string_fragment
                                      (unescaped_string_fragment))
                                    (string_fragment
                                      (unescaped_string_fragment))))))))))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (apply_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))
                    (argument
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (string_literal
                                    (string_fragment
                                      (unescaped_string_fragment))
                                    (string_fragment
                                      (unescaped_string_fragment))
                                    (string_fragment
                                      (escape_sequence))))))))))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
byte literal
================================================================================
fn init {
  let b1 = b'a'
  println(b1.to_int())
  let b2 = b'\xff'
  println(b2.to_int())
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (atomic_expression
                      (literal
                        (byte_literal)))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (apply_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))
                    (argument
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (dot_apply_expression
                                (simple_expression
                                  (qualified_identifier
                                    (lowercase_identifier)))
                                (dot_identifier
                                  (dot_lowercase_identifier))))))))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (atomic_expression
                      (literal
                        (byte_literal
                          (escape_sequence))))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (apply_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))
                    (argument
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (dot_apply_expression
                                (simple_expression
                                  (qualified_identifier
                                    (lowercase_identifier)))
                                (dot_identifier
                                  (dot_lowercase_identifier))))))))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
interpolation
================================================================================
fn main {
  println("hello, \{name}")
    abort("Index length does not match tensor shape \{asdf}")
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (apply_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))
                    (argument
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (string_interpolation
                                  (string_fragment
                                    (unescaped_string_fragment))
                                  (interpolator
                                    (expression
                                      (pipeline_expression
                                        (compound_expression
                                          (simple_expression
                                            (qualified_identifier
                                              (lowercase_identifier))))))))))))))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (apply_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))
                    (argument
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (string_interpolation
                                  (string_fragment
                                    (unescaped_string_fragment))
                                  (interpolator
                                    (expression
                                      (pipeline_expression
                                        (compound_expression
                                          (simple_expression
                                            (qualified_identifier
                                              (lowercase_identifier))))))))))))))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
bytes literal
================================================================================
fn init {
  let b1 = b"a"
  println(b1.to_int())
  println(b"asdfasdf")
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (atomic_expression
                      (literal
                        (bytes_literal
                          (string_fragment
                            (unescaped_string_fragment)))))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (apply_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))
                    (argument
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (dot_apply_expression
                                (simple_expression
                                  (qualified_identifier
                                    (lowercase_identifier)))
                                (dot_identifier
                                  (dot_lowercase_identifier))))))))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (apply_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))
                    (argument
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (bytes_literal
                                    (string_fragment
                                      (unescaped_string_fragment))))))))))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
integer literal
================================================================================
fn main {
  let a = 1
  let b = 1U
  let c = 1L
  let d = 1UL
  let a = 0x9E3779B1
  let a = 0x85EBCA77
  let a = 0xC2B2AE3D
  let a = 0x27D4EB2F
  let a = 0x165667B1
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (atomic_expression
                      (literal
                        (integer_literal)))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (atomic_expression
                      (literal
                        (integer_literal)))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (atomic_expression
                      (literal
                        (integer_literal)))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (atomic_expression
                      (literal
                        (integer_literal)))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (atomic_expression
                      (literal
                        (integer_literal)))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (atomic_expression
                      (literal
                        (integer_literal)))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (atomic_expression
                      (literal
                        (integer_literal)))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (atomic_expression
                      (literal
                        (integer_literal)))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (atomic_expression
                      (literal
                        (integer_literal)))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
bigint literal
================================================================================
fn main {
  let a = 0N
  let b = 0x1aN
  let c = 0b100N
  let d = 0o1237N
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (atomic_expression
                      (literal
                        (integer_literal)))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (atomic_expression
                      (literal
                        (integer_literal)))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (atomic_expression
                      (literal
                        (integer_literal)))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (atomic_expression
                      (literal
                        (integer_literal)))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
float literal
================================================================================
fn main {
  let a = 0.01
  let b = 0.0
  let c = 0x0.1Fp+0
  let d = 0.1e3
  let array = [
    0x1.661ec79f8f3bep+0, 0x1.571ed4aaf883dp+0, 0x1.49539f0f010bp+0, 0x1.3c995b0b80385p+0,
    0x1.30d190c8864a5p+0, 0x1.25e227b0b8eap+0, 0x1.1bb4a4a1a343fp+0, 0x1.12358f08ae5bap+0,
    0x1.0953f419900a7p+0, 0x1.0p+0, 0x1.e608cfd9a47acp-1, 0x1.ca4b31f026aap-1, 0x1.b2036576afce6p-1,
    0x1.9c2d163a1aa2dp-1, 0x1.886e6037841edp-1, 0x1.767dcf5534862p-1,
  ]
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (atomic_expression
                      (literal
                        (float_literal)))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (atomic_expression
                      (literal
                        (float_literal)))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (atomic_expression
                      (literal
                        (float_literal)))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (atomic_expression
                      (literal
                        (float_literal)))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (array_expression
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (float_literal)))))))
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (float_literal)))))))
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (float_literal)))))))
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (float_literal)))))))
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (float_literal)))))))
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (float_literal)))))))
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (float_literal)))))))
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (float_literal)))))))
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (float_literal)))))))
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (float_literal)))))))
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (float_literal)))))))
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (float_literal)))))))
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (float_literal)))))))
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (float_literal)))))))
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (float_literal)))))))
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (float_literal))))))))))))))
        (semicolon
          (automatic_semicolon))))))
