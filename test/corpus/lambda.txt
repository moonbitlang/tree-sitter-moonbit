================================================================================
basic
================================================================================
fn init {
  fn (x: Int) {
    x
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (anonymous_lambda_expression
                    (parameters
                      (parameter
                        (lowercase_identifier)
                        (type_annotation
                          (colon)
                          (type
                            (apply_type
                              (qualified_type_identifier
                                (identifier
                                  (uppercase_identifier))))))))
                    (block_expression
                      (statement_expression
                        (expression
                          (pipeline_expression
                            (compound_expression
                              (simple_expression
                                (qualified_identifier
                                  (lowercase_identifier)))))))
                      (semicolon
                        (automatic_semicolon)))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
one-line
================================================================================
fn init {
  fn (x: Int) { x }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (anonymous_lambda_expression
                    (parameters
                      (parameter
                        (lowercase_identifier)
                        (type_annotation
                          (colon)
                          (type
                            (apply_type
                              (qualified_type_identifier
                                (identifier
                                  (uppercase_identifier))))))))
                    (block_expression
                      (statement_expression
                        (expression
                          (pipeline_expression
                            (compound_expression
                              (simple_expression
                                (qualified_identifier
                                  (lowercase_identifier))))))))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
lambda_curry
================================================================================
fn init {
  let gt = fn (a : Int) { fn (b : Int) { a > b } }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (anonymous_lambda_expression
                      (parameters
                        (parameter
                          (lowercase_identifier)
                          (type_annotation
                            (colon)
                            (type
                              (apply_type
                                (qualified_type_identifier
                                  (identifier
                                    (uppercase_identifier))))))))
                      (block_expression
                        (statement_expression
                          (expression
                            (pipeline_expression
                              (compound_expression
                                (simple_expression
                                  (anonymous_lambda_expression
                                    (parameters
                                      (parameter
                                        (lowercase_identifier)
                                        (type_annotation
                                          (colon)
                                          (type
                                            (apply_type
                                              (qualified_type_identifier
                                                (identifier
                                                  (uppercase_identifier))))))))
                                    (block_expression
                                      (statement_expression
                                        (expression
                                          (pipeline_expression
                                            (compound_expression
                                              (binary_expression
                                                (compound_expression
                                                  (simple_expression
                                                    (qualified_identifier
                                                      (lowercase_identifier))))
                                                (compound_expression
                                                  (simple_expression
                                                    (qualified_identifier
                                                      (lowercase_identifier))))))))))))))))))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
matrix functions
================================================================================
fn init {
  fn boolean_or {
    true, _ => true
    _, true => true
    _, _    => false
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (named_matrix_expression
            (function_identifier
              (lowercase_identifier))
            (matrix_case_clause
              (pattern
                (simple_pattern
                  (literal
                    (boolean_literal))))
              (pattern
                (simple_pattern))
              (statement_expression
                (expression
                  (pipeline_expression
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (boolean_literal)))))))))
            (semicolon
              (automatic_semicolon))
            (matrix_case_clause
              (pattern
                (simple_pattern))
              (pattern
                (simple_pattern
                  (literal
                    (boolean_literal))))
              (statement_expression
                (expression
                  (pipeline_expression
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (boolean_literal)))))))))
            (semicolon
              (automatic_semicolon))
            (matrix_case_clause
              (pattern
                (simple_pattern))
              (pattern
                (simple_pattern))
              (statement_expression
                (expression
                  (pipeline_expression
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (boolean_literal)))))))))
            (semicolon
              (automatic_semicolon))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
matrix functions complex
================================================================================
fn init {
  let _ = fn { x => x + 1 }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern))
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (anonymous_matrix_lambda_expression
                      (matrix_case_clause
                        (pattern
                          (simple_pattern
                            (lowercase_identifier)))
                        (statement_expression
                          (expression
                            (pipeline_expression
                              (compound_expression
                                (binary_expression
                                  (compound_expression
                                    (simple_expression
                                      (qualified_identifier
                                        (lowercase_identifier))))
                                  (compound_expression
                                    (simple_expression
                                      (atomic_expression
                                        (literal
                                          (integer_literal))))))))))))))))))
        (semicolon
          (automatic_semicolon))))))
