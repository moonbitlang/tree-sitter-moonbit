================================================================================
for
================================================================================
fn init {
  for i = 0; i < 10; i = i + 1 {
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (for_expression
              (for_keyword)
              (for_binder
                (lowercase_identifier)
                (expression
                  (pipeline_expression
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal))))))))
              (semicolon)
              (compound_expression
                (binary_expression
                  (compound_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier))))
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal)))))))
              (semicolon)
              (for_binder
                (lowercase_identifier)
                (expression
                  (pipeline_expression
                    (compound_expression
                      (binary_expression
                        (compound_expression
                          (simple_expression
                            (qualified_identifier
                              (lowercase_identifier))))
                        (compound_expression
                          (simple_expression
                            (atomic_expression
                              (literal
                                (integer_literal))))))))))
              (block_expression))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
forever
================================================================================
fn init {
  for i = 0; i < 10; {
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (for_expression
              (for_keyword)
              (for_binder
                (lowercase_identifier)
                (expression
                  (pipeline_expression
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal))))))))
              (semicolon)
              (compound_expression
                (binary_expression
                  (compound_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier))))
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal)))))))
              (semicolon)
              (block_expression))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
simple for
================================================================================
fn init {
  for i = 0 {
    i = i + 1
    continue i + 1
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (for_expression
              (for_keyword)
              (for_binder
                (lowercase_identifier)
                (expression
                  (pipeline_expression
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal))))))))
              (block_expression
                (statement_expression
                  (assign_expression
                    (left_value
                      (qualified_identifier
                        (lowercase_identifier)))
                    (assign_operator
                      (equal))
                    (expression
                      (pipeline_expression
                        (compound_expression
                          (binary_expression
                            (compound_expression
                              (simple_expression
                                (qualified_identifier
                                  (lowercase_identifier))))
                            (compound_expression
                              (simple_expression
                                (atomic_expression
                                  (literal
                                    (integer_literal)))))))))))
                (semicolon
                  (automatic_semicolon))
                (statement_expression
                  (continue_expression
                    (expression
                      (pipeline_expression
                        (compound_expression
                          (binary_expression
                            (compound_expression
                              (simple_expression
                                (qualified_identifier
                                  (lowercase_identifier))))
                            (compound_expression
                              (simple_expression
                                (atomic_expression
                                  (literal
                                    (integer_literal)))))))))))
                (semicolon
                  (automatic_semicolon))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
for-in
================================================================================
fn init {
  let a = [1, 2, 3, 4, 5]
  for i in a {
    i
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (array_expression
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (integer_literal)))))))
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (integer_literal)))))))
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (integer_literal)))))))
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (integer_literal)))))))
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (integer_literal))))))))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (for_in_expression
              (for_keyword)
              (lowercase_identifier)
              (expression
                (pipeline_expression
                  (compound_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier))))))
              (block_expression
                (statement_expression
                  (expression
                    (pipeline_expression
                      (compound_expression
                        (simple_expression
                          (qualified_identifier
                            (lowercase_identifier)))))))
                (semicolon
                  (automatic_semicolon))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
for-else
================================================================================
fn init {
  for i = 0; i < 10; i = i + 1 {
    i
  } else {
    0
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (for_expression
              (for_keyword)
              (for_binder
                (lowercase_identifier)
                (expression
                  (pipeline_expression
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal))))))))
              (semicolon)
              (compound_expression
                (binary_expression
                  (compound_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier))))
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal)))))))
              (semicolon)
              (for_binder
                (lowercase_identifier)
                (expression
                  (pipeline_expression
                    (compound_expression
                      (binary_expression
                        (compound_expression
                          (simple_expression
                            (qualified_identifier
                              (lowercase_identifier))))
                        (compound_expression
                          (simple_expression
                            (atomic_expression
                              (literal
                                (integer_literal))))))))))
              (block_expression
                (statement_expression
                  (expression
                    (pipeline_expression
                      (compound_expression
                        (simple_expression
                          (qualified_identifier
                            (lowercase_identifier)))))))
                (semicolon
                  (automatic_semicolon)))
              (else_clause
                (block_expression
                  (statement_expression
                    (expression
                      (pipeline_expression
                        (compound_expression
                          (simple_expression
                            (atomic_expression
                              (literal
                                (integer_literal))))))))
                  (semicolon
                    (automatic_semicolon)))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
for-in-else
================================================================================
fn init {
  let a = [1, 2, 3, 4, 5]
  for i in a {
    i
  } else {
    0
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (array_expression
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (integer_literal)))))))
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (integer_literal)))))))
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (integer_literal)))))))
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (integer_literal)))))))
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (integer_literal))))))))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (for_in_expression
              (for_keyword)
              (lowercase_identifier)
              (expression
                (pipeline_expression
                  (compound_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier))))))
              (block_expression
                (statement_expression
                  (expression
                    (pipeline_expression
                      (compound_expression
                        (simple_expression
                          (qualified_identifier
                            (lowercase_identifier)))))))
                (semicolon
                  (automatic_semicolon)))
              (else_clause
                (block_expression
                  (statement_expression
                    (expression
                      (pipeline_expression
                        (compound_expression
                          (simple_expression
                            (atomic_expression
                              (literal
                                (integer_literal))))))))
                  (semicolon
                    (automatic_semicolon)))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
for in range
================================================================================
fn main {
  for i in 0..<array.length() {
  }
  for j in 1..=array.length() {
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (for_in_expression
              (for_keyword)
              (lowercase_identifier)
              (expression
                (pipeline_expression
                  (compound_expression
                    (range_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal))))
                      (dot_dot_lt)
                      (simple_expression
                        (dot_apply_expression
                          (simple_expression
                            (qualified_identifier
                              (lowercase_identifier)))
                          (dot_identifier
                            (dot_lowercase_identifier))))))))
              (block_expression))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (for_in_expression
              (for_keyword)
              (lowercase_identifier)
              (expression
                (pipeline_expression
                  (compound_expression
                    (range_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal))))
                      (dot_dot_eq)
                      (simple_expression
                        (dot_apply_expression
                          (simple_expression
                            (qualified_identifier
                              (lowercase_identifier)))
                          (dot_identifier
                            (dot_lowercase_identifier))))))))
              (block_expression))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
for with line break
================================================================================
fn init {
  for i = 0
      i < 10
      i = i + 1 {
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (for_expression
              (for_keyword)
              (for_binder
                (lowercase_identifier)
                (expression
                  (pipeline_expression
                    (compound_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal))))))))
              (semicolon
                (automatic_semicolon))
              (compound_expression
                (binary_expression
                  (compound_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier))))
                  (compound_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal)))))))
              (semicolon
                (automatic_semicolon))
              (for_binder
                (lowercase_identifier)
                (expression
                  (pipeline_expression
                    (compound_expression
                      (binary_expression
                        (compound_expression
                          (simple_expression
                            (qualified_identifier
                              (lowercase_identifier))))
                        (compound_expression
                          (simple_expression
                            (atomic_expression
                              (literal
                                (integer_literal))))))))))
              (block_expression))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
for with loop
================================================================================
fn main {
  label~: for x in xs {
    println(x)
  }
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (function_definition
      (block_expression
        (statement_expression
          (expression
            (for_in_expression
              (loop_label
                (lowercase_identifier))
              (for_keyword)
              (lowercase_identifier)
              (expression
                (pipeline_expression
                  (compound_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier))))))
              (block_expression
                (statement_expression
                  (expression
                    (pipeline_expression
                      (compound_expression
                        (simple_expression
                          (apply_expression
                            (simple_expression
                              (qualified_identifier
                                (lowercase_identifier)))
                            (argument
                              (expression
                                (pipeline_expression
                                  (compound_expression
                                    (simple_expression
                                      (qualified_identifier
                                        (lowercase_identifier)))))))))))))
                (semicolon
                  (automatic_semicolon))))))
        (semicolon
          (automatic_semicolon))))))
