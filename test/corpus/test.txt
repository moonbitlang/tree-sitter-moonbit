================================================================================
basic
================================================================================
test "t" {
  let x = 1
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (test_definition
      (string_literal
        (string_fragment
          (unescaped_string_fragment)))
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (atomic_expression
                      (literal
                        (integer_literal)))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
anonymous
================================================================================
test {
  let x = 1
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (test_definition
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (pipeline_expression
                (compound_expression
                  (simple_expression
                    (atomic_expression
                      (literal
                        (integer_literal)))))))))
        (semicolon
          (automatic_semicolon))))))

================================================================================
snapshot
================================================================================
test "a" (it : @test.T) {
  it.writeln("hello")
  it.snapshot!(filename="test.txt")
}
--------------------------------------------------------------------------------

(structure
  (statement_expression
    (test_definition
      (string_literal
        (string_fragment
          (unescaped_string_fragment)))
      (parameters
        (parameter
          (lowercase_identifier)
          (type_annotation
            (colon)
            (type
              (apply_type
                (qualified_type_identifier
                  (package_identifier)
                  (dot_identifier
                    (dot_uppercase_identifier))))))))
      (block_expression
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (dot_apply_expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier)))
                    (dot_identifier
                      (dot_lowercase_identifier))
                    (argument
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (string_literal
                                    (string_fragment
                                      (unescaped_string_fragment))))))))))))))))
        (semicolon
          (automatic_semicolon))
        (statement_expression
          (expression
            (pipeline_expression
              (compound_expression
                (simple_expression
                  (apply_expression
                    (simple_expression
                      (access_expression
                        (simple_expression
                          (qualified_identifier
                            (lowercase_identifier)))
                        (accessor
                          (dot_identifier
                            (dot_lowercase_identifier)))))
                    (apply_operator)
                    (argument
                      (argument_label
                        (simple_expression
                          (qualified_identifier
                            (lowercase_identifier))))
                      (expression
                        (pipeline_expression
                          (compound_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (string_literal
                                    (string_fragment
                                      (unescaped_string_fragment))))))))))))))))
        (semicolon
          (automatic_semicolon))))))
